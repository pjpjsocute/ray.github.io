<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ray‘s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://pjpjsocute.github.io/"/>
  <updated>2023-05-22T07:59:41.209Z</updated>
  <id>http://pjpjsocute.github.io/</id>
  
  <author>
    <name>Ray zhou</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCode-005,如何一步步思考到动态规划</title>
    <link href="http://pjpjsocute.github.io/2023/05/21/LeetCode/LeetCode-005/"/>
    <id>http://pjpjsocute.github.io/2023/05/21/LeetCode/LeetCode-005/</id>
    <published>2023-05-21T08:14:10.000Z</published>
    <updated>2023-05-22T07:59:41.209Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Q"><a href="#Q" class="headerlink" title="Q:"></a>Q:</h3><p>给你一个字符串 <code>s</code>，找到 <code>s</code> 中最长的回文子串。</p><p>如果字符串的反序与原始字符串相同，则该字符串称为回文字符串。</p><span id="more"></span><h3 id="Input"><a href="#Input" class="headerlink" title="Input:"></a>Input:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;babad&quot;</span><br><span class="line">输出：&quot;bab&quot;</span><br><span class="line">解释：&quot;aba&quot; 同样是符合题意的答案。</span><br></pre></td></tr></table></figure><h3 id="S"><a href="#S" class="headerlink" title="S:"></a>S:</h3><p>如果是第一次做类似的题目，其实一下子是并不容易想到可以使用动态规划。</p><p>但是，通过一步步的思考和优化，使用动态规划其实是一种比较自然的想法。</p><h5 id="首先："><a href="#首先：" class="headerlink" title="首先："></a>首先：</h5><h5 id="根据题目的要求，一种最简单的做法应该是："><a href="#根据题目的要求，一种最简单的做法应该是：" class="headerlink" title="根据题目的要求，一种最简单的做法应该是："></a>根据题目的要求，一种最简单的做法应该是：</h5><ol><li><h6 id="设计一个方法-judgeIsPalindrome-基于双指针，我们可以得到一个On的判断String-i-j-是否是回文串的方法"><a href="#设计一个方法-judgeIsPalindrome-基于双指针，我们可以得到一个On的判断String-i-j-是否是回文串的方法" class="headerlink" title="设计一个方法 judgeIsPalindrome ,基于双指针，我们可以得到一个On的判断String(i,j)是否是回文串的方法"></a>设计一个方法 <code>judgeIsPalindrome</code> ,基于双指针，我们可以得到一个On的判断String(i,j)是否是回文串的方法</h6></li><li><h6 id="枚举所有的长度k-从大到小判断所有的String-i-i-k-1-，判断是否是回文串，如果是，则得到题目要求。"><a href="#枚举所有的长度k-从大到小判断所有的String-i-i-k-1-，判断是否是回文串，如果是，则得到题目要求。" class="headerlink" title="枚举所有的长度k,从大到小判断所有的String(i,i+k-1)，判断是否是回文串，如果是，则得到题目要求。"></a>枚举所有的长度k,从大到小判断所有的String(i,i+k-1)，判断是否是回文串，如果是，则得到题目要求。</h6><p>这个做法很简单，但是存在一个问题就是，需要枚举所有的K，最坏的情况需要枚举N种，而对每种长度，最坏需要计算N次才能得到结果。所以整体复杂度很高，无法通过。需要寻找一种更优的做法。</p></li></ol><h5 id="根据以上的思路，一种想法就是并不需要枚举每一个K，而是改为使用二分法搜索最大的K，这样复杂度会变为LogN。有兴趣的可以自己尝试一下这个思路。"><a href="#根据以上的思路，一种想法就是并不需要枚举每一个K，而是改为使用二分法搜索最大的K，这样复杂度会变为LogN。有兴趣的可以自己尝试一下这个思路。" class="headerlink" title="根据以上的思路，一种想法就是并不需要枚举每一个K，而是改为使用二分法搜索最大的K，这样复杂度会变为LogN。有兴趣的可以自己尝试一下这个思路。"></a>根据以上的思路，一种想法就是并不需要枚举每一个K，而是改为使用二分法搜索最大的K，这样复杂度会变为LogN。有兴趣的可以自己尝试一下这个思路。</h5><h5 id="上面这个思路是有可能通过的，但是说明仍然可以优化。我们可以注意到，上面的做法还有一个问题就是，每次都需要重新判断新长度的子串是否是回文，而没有利用到之前计算过的结果。假设我们对一个特定的长度-k-i-，我们已经知道了String中所有长度为-k-i-的子串是否是回文串。那么当我们知道String-i-i-k-i-1-是否是回文的时候，对于String-i-1-i-k-i-其实这个结果也是可以在O1的时间内得到："><a href="#上面这个思路是有可能通过的，但是说明仍然可以优化。我们可以注意到，上面的做法还有一个问题就是，每次都需要重新判断新长度的子串是否是回文，而没有利用到之前计算过的结果。假设我们对一个特定的长度-k-i-，我们已经知道了String中所有长度为-k-i-的子串是否是回文串。那么当我们知道String-i-i-k-i-1-是否是回文的时候，对于String-i-1-i-k-i-其实这个结果也是可以在O1的时间内得到：" class="headerlink" title="上面这个思路是有可能通过的，但是说明仍然可以优化。我们可以注意到，上面的做法还有一个问题就是，每次都需要重新判断新长度的子串是否是回文，而没有利用到之前计算过的结果。假设我们对一个特定的长度$k_i$ ，我们已经知道了String中所有长度为$k_i$ 的子串是否是回文串。那么当我们知道String(i,i+$k_i$-1) 是否是回文的时候，对于String(i-1,i+$k_i$)其实这个结果也是可以在O1的时间内得到："></a>上面这个思路是有可能通过的，但是说明仍然可以优化。我们可以注意到，上面的做法还有一个问题就是，每次都需要重新判断新长度的子串是否是回文，而没有利用到之前计算过的结果。假设我们对一个特定的长度$k_i$ ，我们已经知道了String中所有长度为$k_i$ 的子串是否是回文串。那么当我们知道String(i,i+$k_i$-1) 是否是回文的时候，对于String(i-1,i+$k_i$)其实这个结果也是可以在O1的时间内得到：</h5><p><code>dp[i][j] = dp[i+1][j-1] ^String[i] == String [j]</code></p><p>即只有String(i,i+$k_i$-1) 是回文并且String[i] == String [j]，那么String(i-1,i+$k_i$)才能是回文串。</p><p>下面可以写出DP代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">longestPalindrome</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> s.length();</span><br><span class="line">    <span class="keyword">if</span> (len &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">boolean</span>[][] dp = <span class="keyword">new</span> <span class="title class_">boolean</span>[len][len];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        dp[i][i] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">maxLen</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; len; j++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> j - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.charAt(i) == s.charAt(j)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j - i &lt; <span class="number">3</span>) &#123;</span><br><span class="line">                    dp[i][j] = <span class="literal">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    dp[i][j] = dp[i + <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                dp[i][j] = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (dp[i][j]) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">curLen</span> <span class="operator">=</span> j - i + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (curLen &gt; maxLen) &#123;</span><br><span class="line">                    maxLen = curLen;</span><br><span class="line">                    start = i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s.substring(start, start + maxLen);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id><a href="#" class="headerlink" title=" "></a> </h6>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Q&quot;&gt;&lt;a href=&quot;#Q&quot; class=&quot;headerlink&quot; title=&quot;Q:&quot;&gt;&lt;/a&gt;Q:&lt;/h3&gt;&lt;p&gt;给你一个字符串 &lt;code&gt;s&lt;/code&gt;，找到 &lt;code&gt;s&lt;/code&gt; 中最长的回文子串。&lt;/p&gt;
&lt;p&gt;如果字符串的反序与原始字符串相同，则该字符串称为回文字符串。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://pjpjsocute.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="java" scheme="http://pjpjsocute.github.io/tags/java/"/>
    
      <category term="力扣之旅" scheme="http://pjpjsocute.github.io/tags/%E5%8A%9B%E6%89%A3%E4%B9%8B%E6%97%85/"/>
    
      <category term="回文" scheme="http://pjpjsocute.github.io/tags/%E5%9B%9E%E6%96%87/"/>
    
      <category term="递归" scheme="http://pjpjsocute.github.io/tags/%E9%80%92%E5%BD%92/"/>
    
      <category term="String" scheme="http://pjpjsocute.github.io/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>树状数组</title>
    <link href="http://pjpjsocute.github.io/2023/05/15/Datastructures/BIT/"/>
    <id>http://pjpjsocute.github.io/2023/05/15/Datastructures/BIT/</id>
    <published>2023-05-15T03:30:14.000Z</published>
    <updated>2023-05-15T09:42:56.771Z</updated>
    
    <content type="html"><![CDATA[<h2 id="树状数组与力扣中的应用"><a href="#树状数组与力扣中的应用" class="headerlink" title="树状数组与力扣中的应用"></a>树状数组与力扣中的应用</h2><ul><li><h3 id="为什么会需要树状数组"><a href="#为什么会需要树状数组" class="headerlink" title="为什么会需要树状数组"></a>为什么会需要树状数组</h3><ul><li><h4 id="思考以下问题"><a href="#思考以下问题" class="headerlink" title="思考以下问题"></a>思考以下问题</h4></li></ul><p><strong>QA</strong>:</p><p>假设存在一个整数序列input，例如<code>intput = [1,2,7,4,3]</code>，要求前K个数的和。</p><p><strong>Sulotion</strong>:</p><p>一般我们会求一个前缀和数组<code>preSumArray</code>,其中<code>preSumArray[i]</code>代表前<code>i</code>个数的和，这样我们求前N个数的和只需要返回<code>preSumArray[N]</code>， 时间复杂度为O(1),如果需要查询K次，则复杂度为O(K).</p><ul><li><h4 id="升级这个问题"><a href="#升级这个问题" class="headerlink" title="升级这个问题"></a>升级这个问题</h4></li></ul><p><strong>QA</strong>:</p><p>假设存在一个整数序列input，例如<code>intput = [1,2,7,4,3]</code>，现在在我们获取前N个数的和时，可能会先将<code>i</code>位置的数增加/减少<code>value</code>。</p><p><strong>Sulotion</strong>:</p><p>一般我们会求一个前缀和数组<code>preSumArray</code>,其中<code>preSumArray[i]</code>代表前<code>i</code>个数的和，如上一个问题所示，我们依旧可以在O(1)的时间得到前缀和。但是如果我们需要在第<code>i</code>位置插入一个数<code>x</code>，在进行更新时需要更新<code>i</code>之后的所有<code>preSumArray</code>，此时单次的更新时间为O(N)，K次查询的复杂度为O(KN)。如果我们不使用<code>preSumArray</code>，那么更新复杂度为O(1),查询复杂度会变为O(N)。</p><p><strong>这时树桩数组可以帮助我们快速解决这个问题</strong></p><span id="more"></span><ul><li><h4 id="前置知识——二进制的应用"><a href="#前置知识——二进制的应用" class="headerlink" title="前置知识——二进制的应用"></a>前置知识——二进制的应用</h4></li></ul><p>二进制有很多有趣的应用，可能后续可以进行一些总结，但是这里介绍一个用法<code>lowbit(x) = x&amp;(-x)</code></p><p>这个式子的目的是<strong>可以求出能够整除X的最大的2次幂</strong>，<strong>也就是X最右边的1</strong>，这个目的很重要。</p><p>举个例子: <code>5&amp;-5 = 1</code>；<code>10&amp;-10 = 2</code>；<code>12&amp;-12 = 4</code></p><p><strong>原理：</strong></p><p>一般整数在计算机中使用补码存储，负数相当于每一位取反，然后低位+1。</p><p>如 <code>10 = 1010</code>, <code>-10 = 0110</code>,因此<code>lowbit(10) = 2</code></p><ul><li><h4 id="数状数组（Binary-Indexed-Tree，BIT）"><a href="#数状数组（Binary-Indexed-Tree，BIT）" class="headerlink" title="数状数组（Binary Indexed Tree，BIT）"></a>数状数组（Binary Indexed Tree，BIT）</h4><ul><li><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5></li></ul><p>本质上它仍是一个数组，并且与<code>preSumArray</code>相似，存的依旧是和数组，但是他存放的是 <strong>i位之前(包括i)，lowbit(i)个整数的和</strong>。可以用下图以及公式表示</p><p><img src="/2023/05/15/Datastructures/BIT/WX20230515-152510@2x.png" alt="WX20230515-152510@2x"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">B(1) = A(1);</span><br><span class="line">B(2) = A(1)+A(2);</span><br><span class="line">B(3) = A(3);</span><br><span class="line">B(4) = A(1)+A(2)+A(3)+A(4);</span><br><span class="line">B(5) = A(5);</span><br><span class="line">B(6) = A(5)+A(6);</span><br><span class="line">B(7) = A(7);</span><br><span class="line">B(8) = A(1)+A(2)+A(3)+A(4)+A(5)+A(6)+A(7)+A(8);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>tip</strong>:树状数组的下标必须从1开始</p></li><li><ul><li><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><p>现在基于树状数组，我们需要解决之前的2个问题——求和与更新。</p><ul><li><h6 id="求和"><a href="#求和" class="headerlink" title="求和"></a>求和</h6><p>假设我们有一个函数getSum(i),可以求1-i的所有数的和。接下来就是如何去实现它。</p><p>举个例子:</p><p><code>getSum(7) = A(1)+...+A(7) = B(4)+B(6)+B(7)</code></p><p><code>getSum(6) =  B(4)+B(6)</code></p><p>现在的问题就是，如何将<code>A(1)+....+A(i)</code>映射到树桩数组对应那些项:<br>首先: B(i)的定义为从A(i)开始，前lowbit(i)的和，所以我们可以得到<br>$B(i) = A(i-lowbit(i)+1)+…+A(i)$<br>因此，我们可以得到:</p><p>$$getSum(i) = A(1)+…+A(i)\<br>=A(1)+…+A(i-lowbit(i))+A(i-lowbit(i)+1)+…+A(i)\<br>=getSum(i-lowbit(i))+B(i)$$</p><p>这样我们可以很容易的写出getSum函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSum</span><span class="params">(<span class="type">int</span> x)</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> x; i &gt; <span class="number">0</span>; i -= lowbit(i)) &#123;</span><br><span class="line">      res += bit[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用递归的形式:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSum</span><span class="params">(<span class="type">int</span> x)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> bit[x]+(<span class="type">long</span>)getSum(x-lowbit(x));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>该过程的复杂度为O(LogN)</strong>(省略过程)</p><p>更进一步，如果我们要求<code>sum(i,j)</code>，那么我们只需要<code>getSum(j)-getSum(i-1)</code>即可。</p></li><li><h6 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h6><p>假设我们有一个函数<code>update(i,value)</code>，实现在i位置的数加上 <code>value</code>。现在思考如何实现：</p><p>还是举个例子：</p><p>如果我们要<code>update(6,7)</code>，也就是在6的位置+7，那我们根据上面的图，我们需要更新 <code>B(6)和B(8)</code>,因为 <code>B(6)</code>和<code>B(8)</code>的求和项均包含了A(6)。</p><p><code>B(6) = A(5)+A(6);</code><br><code>B(8) = A(1)+A(2)+A(3)+A(4)+A(5)+A(6)+A(7)+A(8);</code></p><p>所以现在的问题转换为如何知道BIT中所有包含A(i)的项。</p><p><img src="/2023/05/15/Datastructures/BIT/WX20230515-152510@2x.png" alt="WX20230515-152510@2x"></p><p>比如我们我们要找到所有覆盖A(5)的BIT。</p><p>首先：B(5)一定覆盖了。</p><p>其次，我们需要找到距离B(5)最近覆盖它的BIT，即B(6)</p><p>接下来只需要找到覆盖了B(6)距离他最近的BIT，即B(8)</p><p>以此类推。</p><p>也就是说，我们只需要找到对于当前BIT(i)，能覆盖它的最近的BIT(j)，并更新他的值。</p><p>我们可以发现：</p><p>如果需要BIT(j)覆盖BIT(i)，那么<code>lowbit(j)&gt;lowbit(i)</code>，否则肯定无法覆盖，那么可以转换为 <code>lowbit(i+a)&gt;lowbit(i)</code>，求最小的a。</p><p>因为lowbit(i)是<strong>整除i的最大的2次幂</strong>，<strong>也就是i最右边的1</strong>。</p><p>所以如果 <code>lowbit(a)&lt;lowbit(i)</code>，那么<code>lowbit(i+a)&lt;lowbit(i)</code>。</p><p>举个例子，如果<code>lowbit(j)</code>是0100，<code>lowbit(i)</code>是0010，如果<code>lowbit(a+i)一定小于lowbit(i)</code>(因为最右边的1一定会被保留所以a+i只会取a和i中右1更小的那个)。</p><p>当<code>lowbit(a)=lowbit(i)</code>，此时会最右边的1会产生进位，那么最右边的1<strong>一定会向右移</strong>，所以<code>lowbit(a+i)&gt;lowbit(i)</code>，一定成立，因此我们可以得到<code>lowbit(a)=lowbit(i)</code></p><p>这样我们可以开始写update函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updata</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> value)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> x; i &lt; bit.length; i += lowbit(i))&#123;</span><br><span class="line">      <span class="comment">//update</span></span><br><span class="line">      bit[i] += value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><h4 id="力扣中的应用"><a href="#力扣中的应用" class="headerlink" title="力扣中的应用"></a>力扣中的应用</h4><ul><li><h4 id="LeetCode-493"><a href="#LeetCode-493" class="headerlink" title="LeetCode-493"></a>LeetCode-493</h4><ul><li><h5 id="Qa"><a href="#Qa" class="headerlink" title="Qa:"></a>Qa:</h5><p>给定一个数组 <code>nums</code> ，如果 <code>i &lt; j</code> 且 <code>nums[i] &gt; 2*nums[j]</code> 我们就将 <code>(i, j)</code> 称作一个<strong><em>重要翻转对\</em></strong>。</p><p>你需要返回给定数组中的重要翻转对的数量。</p></li><li><h5 id="Input"><a href="#Input" class="headerlink" title="Input:"></a>Input:</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,3,2,3,1]</span><br><span class="line">输出: 2</span><br></pre></td></tr></table></figure></li><li><h5 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h5><p>题干的问题可以转换为求 <strong>在j元素左边比他2倍大的元素有几个</strong>，并求和。</p><ol><li>将数组进行排序，并且离散化映射为1-n的有序序列(多数题都需要这一步，因为树状数组的索引必须从1开始，所以需要对入参进行映射)。</li><li>统计每个数的出现次数。</li><li>求映射元素次数的前缀和, 得到映射后的元素的个数, 也就得到了之前元素的个数</li></ol></li><li><h5 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">TrieArr</span>&#123;</span><br><span class="line">        <span class="type">long</span> [] arr;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">TrieArr</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">            arr = <span class="keyword">new</span> <span class="title class_">long</span> [n];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lowbit</span><span class="params">(<span class="type">int</span> x)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> x&amp;(-x);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSum</span><span class="params">(<span class="type">int</span> x)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(x&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> arr[x]+()getSum(x-lowbit(x));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updata</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> c)</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> x; i &lt; arr.length; i += lowbit(i)) arr[i] += c;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">reversePairs</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">      <span class="comment">//nums[i] 和树桩数组的index映射map</span></span><br><span class="line">        <span class="comment">//nums[i] and BIT&#x27;s index mapping map</span></span><br><span class="line">        Map&lt;Long,Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">       <span class="comment">//对nums元素排序存储，因为要求的是大2倍的数，所以需要把nums[i]*2也加入计算</span></span><br><span class="line">      <span class="comment">//Sort and store the elements of nums, because the number required is 2 times larger, so you need to add nums[i]*2 to the calculation as well</span></span><br><span class="line">        TreeSet&lt;Long&gt; set = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i:nums)&#123;</span><br><span class="line">            set.add((<span class="type">long</span>)i);</span><br><span class="line">            set.add((<span class="type">long</span>)i*<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//离散化,并映射</span></span><br><span class="line">      <span class="comment">//Discretization, and mapping</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(!set.isEmpty())&#123;</span><br><span class="line">            map.put(set.pollFirst(),index++);</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">//init bit tree</span></span><br><span class="line">        <span class="type">TrieArr</span> <span class="variable">bit</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TrieArr</span>(map.size()+<span class="number">1</span>);</span><br><span class="line">      <span class="comment">//result</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            <span class="comment">//因为是求大于nums[i]*2的出现总次数，那么将所有数字的出现次数-小于等于nums[i]*2出现的次数即可。</span></span><br><span class="line">           <span class="comment">//Since we are looking for the total number of occurrences greater than nums[i]*2, it is sufficient to take the number of occurrences of all numbers - the number of occurrences less than or equal to nums[i]*2.</span></span><br><span class="line">          <span class="comment">//get the nums[i]*2</span></span><br><span class="line">            <span class="type">long</span> <span class="variable">target</span> <span class="operator">=</span> (<span class="type">long</span>)nums[i] * <span class="number">2</span>;</span><br><span class="line">          <span class="comment">//get bit index</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> map.get(target);</span><br><span class="line">          <span class="comment">//total sum - getsum(target)</span></span><br><span class="line">            ans += bit.getSum(map.size()) - bit.getSum(l);</span><br><span class="line">          <span class="comment">//get nums[i]’s index and update nums[i] occurrences</span></span><br><span class="line">            bit.updata(map.get((<span class="type">long</span>)nums[i]), <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul></li></ul><pre><code>- #### 类似的问题还有LeetCode-307 .etc</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;树状数组与力扣中的应用&quot;&gt;&lt;a href=&quot;#树状数组与力扣中的应用&quot; class=&quot;headerlink&quot; title=&quot;树状数组与力扣中的应用&quot;&gt;&lt;/a&gt;树状数组与力扣中的应用&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;h3 id=&quot;为什么会需要树状数组&quot;&gt;&lt;a href=&quot;#为什么会需要树状数组&quot; class=&quot;headerlink&quot; title=&quot;为什么会需要树状数组&quot;&gt;&lt;/a&gt;为什么会需要树状数组&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;h4 id=&quot;思考以下问题&quot;&gt;&lt;a href=&quot;#思考以下问题&quot; class=&quot;headerlink&quot; title=&quot;思考以下问题&quot;&gt;&lt;/a&gt;思考以下问题&lt;/h4&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;QA&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;假设存在一个整数序列input，例如&lt;code&gt;intput = [1,2,7,4,3]&lt;/code&gt;，要求前K个数的和。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Sulotion&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;一般我们会求一个前缀和数组&lt;code&gt;preSumArray&lt;/code&gt;,其中&lt;code&gt;preSumArray[i]&lt;/code&gt;代表前&lt;code&gt;i&lt;/code&gt;个数的和，这样我们求前N个数的和只需要返回&lt;code&gt;preSumArray[N]&lt;/code&gt;， 时间复杂度为O(1),如果需要查询K次，则复杂度为O(K).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;h4 id=&quot;升级这个问题&quot;&gt;&lt;a href=&quot;#升级这个问题&quot; class=&quot;headerlink&quot; title=&quot;升级这个问题&quot;&gt;&lt;/a&gt;升级这个问题&lt;/h4&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;QA&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;假设存在一个整数序列input，例如&lt;code&gt;intput = [1,2,7,4,3]&lt;/code&gt;，现在在我们获取前N个数的和时，可能会先将&lt;code&gt;i&lt;/code&gt;位置的数增加/减少&lt;code&gt;value&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Sulotion&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;一般我们会求一个前缀和数组&lt;code&gt;preSumArray&lt;/code&gt;,其中&lt;code&gt;preSumArray[i]&lt;/code&gt;代表前&lt;code&gt;i&lt;/code&gt;个数的和，如上一个问题所示，我们依旧可以在O(1)的时间得到前缀和。但是如果我们需要在第&lt;code&gt;i&lt;/code&gt;位置插入一个数&lt;code&gt;x&lt;/code&gt;，在进行更新时需要更新&lt;code&gt;i&lt;/code&gt;之后的所有&lt;code&gt;preSumArray&lt;/code&gt;，此时单次的更新时间为O(N)，K次查询的复杂度为O(KN)。如果我们不使用&lt;code&gt;preSumArray&lt;/code&gt;，那么更新复杂度为O(1),查询复杂度会变为O(N)。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这时树桩数组可以帮助我们快速解决这个问题&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="技术" scheme="http://pjpjsocute.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="java" scheme="http://pjpjsocute.github.io/tags/java/"/>
    
      <category term="数据结构" scheme="http://pjpjsocute.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="树状数组" scheme="http://pjpjsocute.github.io/tags/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    
      <category term="力扣之旅" scheme="http://pjpjsocute.github.io/tags/%E5%8A%9B%E6%89%A3%E4%B9%8B%E6%97%85/"/>
    
  </entry>
  
  <entry>
    <title>以LeetCode_813为例,从递归到记忆化递归到DP</title>
    <link href="http://pjpjsocute.github.io/2023/05/13/LeetCode/LeetCode-813/"/>
    <id>http://pjpjsocute.github.io/2023/05/13/LeetCode/LeetCode-813/</id>
    <published>2023-05-13T08:14:10.000Z</published>
    <updated>2023-05-12T16:34:45.133Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Q"><a href="#Q" class="headerlink" title="Q:"></a>Q:</h3><p>给定数组 <code>nums</code> 和一个整数 <code>k</code> 。我们将给定的数组 <code>nums</code> 分成 <strong>最多</strong> <code>k</code> 个相邻的非空子数组 。 <strong>分数</strong> 由每个子数组内的平均值的总和构成。</p><p>注意我们必须使用 <code>nums</code> 数组中的每一个数进行分组，并且分数不一定需要是整数。</p><p>返回我们所能得到的最大 <strong>分数</strong> 是多少。答案误差在 <code>10-6</code> 内被视为是正确的。</p><span id="more"></span><h3 id="Input"><a href="#Input" class="headerlink" title="Input:"></a>Input:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [9,1,2,3,9], k = 3</span><br><span class="line">输出: 20.00000</span><br><span class="line">解释: </span><br><span class="line">nums 的最优分组是[9], [1, 2, 3], [9]. 得到的分数是 9 + (1 + 2 + 3) / 3 + 9 = 20. </span><br><span class="line">我们也可以把 nums 分成[9, 1], [2], [3, 9]. </span><br><span class="line">这样的分组得到的分数为 5 + 2 + 6 = 13, 但不是最大值.</span><br></pre></td></tr></table></figure><h3 id="S"><a href="#S" class="headerlink" title="S:"></a>S:</h3><h4 id="一"><a href="#一" class="headerlink" title="一"></a>一</h4><p>解决这个问题最直观的想法是，我们可以列举每个案例，最后得到最优答案。所以，我们可以通过递归枚举来解决问题，通过枚举每个分区的情况，得到最终的最大值<br>递归代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">largestSumOfAverages</span><span class="params">(<span class="type">int</span>[] A, <span class="type">int</span> K)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> dfs(A, <span class="number">0</span>, K);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> A[] ,<span class="type">int</span> index,<span class="type">int</span> K)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(K==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(K==<span class="number">1</span>)&#123;<span class="comment">// k=1时直接返回整个数组的均值</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=index;i&lt;A.length;i++)&#123;</span><br><span class="line">                sum+=A[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> (<span class="type">double</span>)sum/(A.length-index);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">double</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0.0</span>;</span><br><span class="line">        <span class="type">double</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0.0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=index;i&lt;=A.length-K;i++)&#123;</span><br><span class="line">            sum+=A[i];<span class="comment">//枚举每个分离点</span></span><br><span class="line">            <span class="type">double</span> <span class="variable">avage</span> <span class="operator">=</span> sum/(i-index+<span class="number">1</span>);</span><br><span class="line">            <span class="type">double</span> <span class="variable">temp</span> <span class="operator">=</span> dfs(A,i+<span class="number">1</span>,K-<span class="number">1</span>);<span class="comment">//下一个组的均值</span></span><br><span class="line">            res = Math.max(res, avage+temp);<span class="comment">//取最大</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">double</span>)res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="二"><a href="#二" class="headerlink" title="二"></a>二</h4><p>​        在本题中，递归会超时，一般情况下，递归都不是最优解，因为他会进行许多重复运算，所以，我们可以使用记忆化递归，所谓记忆化就是使用一个数组记录过已经得到的递归值，当再次进入该分支后可以快速得到解。 在理解了上面的递归代码后稍微修改一下可以很容易得到记忆化递归代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">double</span> [][] memo ;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">largestSumOfAverages</span><span class="params">(<span class="type">int</span>[] A, <span class="type">int</span> K)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.memo = <span class="keyword">new</span> <span class="title class_">double</span> [A.length+<span class="number">1</span>][K+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">return</span> dfs(A, <span class="number">0</span>, K);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> A[] ,<span class="type">int</span> index,<span class="type">int</span> K)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(K==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(memo[index][K]!=<span class="number">0.0</span>)   <span class="keyword">return</span> memo[index][K];</span><br><span class="line">        <span class="keyword">if</span>(K==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=index;i&lt;A.length;i++)&#123;</span><br><span class="line">                sum+=A[i];</span><br><span class="line">            &#125;</span><br><span class="line">            memo[index][K] = (<span class="type">double</span>)sum/(A.length-index);</span><br><span class="line">            <span class="keyword">return</span> memo[index][K];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">double</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0.0</span>;</span><br><span class="line">        <span class="type">double</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0.0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=index;i&lt;=A.length-K;i++)&#123;</span><br><span class="line">            sum+=A[i];</span><br><span class="line">            <span class="type">double</span> <span class="variable">avage</span> <span class="operator">=</span> sum/(i-index+<span class="number">1</span>);</span><br><span class="line">            <span class="comment">// double temp = dfs(A,i+1,K-1);</span></span><br><span class="line">            <span class="comment">// memo[i+1][K-1] = temp;</span></span><br><span class="line">            memo[i+<span class="number">1</span>][K-<span class="number">1</span>] = dfs(A,i+<span class="number">1</span>,K-<span class="number">1</span>);</span><br><span class="line">            res = Math.max(res, avage+memo[i+<span class="number">1</span>][K-<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        memo[index][K] =res;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">double</span>)res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="三"><a href="#三" class="headerlink" title="三"></a>三</h4><p>​        记忆递归实际上与动态规划非常相似，只是一个是自上而下的表法，另一个是自下而上的表法。基于记忆递归的思想，我们可以将记忆递归改写为DP</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">largestSumOfAverages</span><span class="params">(<span class="type">int</span>[] A, <span class="type">int</span> K)</span> &#123;</span><br><span class="line">        <span class="type">double</span>[][] dp = <span class="keyword">new</span> <span class="title class_">double</span>[A.length+<span class="number">1</span>][K+<span class="number">1</span>];</span><br><span class="line">        <span class="type">double</span> [] preSum = <span class="keyword">new</span> <span class="title class_">double</span>[A.length+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;A.length;i++)&#123;</span><br><span class="line">            preSum[i+<span class="number">1</span>]= preSum[i]+A[i];</span><br><span class="line">            dp[i+<span class="number">1</span>][<span class="number">1</span>] = preSum[i+<span class="number">1</span>]/(i+<span class="number">1</span>);<span class="comment">//初始化</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=A.length;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">2</span>;j&lt;=Math.min(K, i);j++)&#123;</span><br><span class="line">                <span class="comment">//dp[i][j]的最大均值 应该是 dp[i&#x27;][j-1]的均值+i&#x27;-i的均值和  中所有的可能中的最大值</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> <span class="number">0</span>;t&lt;i;t++)&#123;</span><br><span class="line">                    dp[i][j] = Math.max(dp[i][j], dp[t][j-<span class="number">1</span>]+(preSum[i]-preSum[t])/(i-t));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[A.length][K];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Q&quot;&gt;&lt;a href=&quot;#Q&quot; class=&quot;headerlink&quot; title=&quot;Q:&quot;&gt;&lt;/a&gt;Q:&lt;/h3&gt;&lt;p&gt;给定数组 &lt;code&gt;nums&lt;/code&gt; 和一个整数 &lt;code&gt;k&lt;/code&gt; 。我们将给定的数组 &lt;code&gt;nums&lt;/code&gt; 分成 &lt;strong&gt;最多&lt;/strong&gt; &lt;code&gt;k&lt;/code&gt; 个相邻的非空子数组 。 &lt;strong&gt;分数&lt;/strong&gt; 由每个子数组内的平均值的总和构成。&lt;/p&gt;
&lt;p&gt;注意我们必须使用 &lt;code&gt;nums&lt;/code&gt; 数组中的每一个数进行分组，并且分数不一定需要是整数。&lt;/p&gt;
&lt;p&gt;返回我们所能得到的最大 &lt;strong&gt;分数&lt;/strong&gt; 是多少。答案误差在 &lt;code&gt;10-6&lt;/code&gt; 内被视为是正确的。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://pjpjsocute.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="java" scheme="http://pjpjsocute.github.io/tags/java/"/>
    
      <category term="力扣之旅" scheme="http://pjpjsocute.github.io/tags/%E5%8A%9B%E6%89%A3%E4%B9%8B%E6%97%85/"/>
    
      <category term="递归" scheme="http://pjpjsocute.github.io/tags/%E9%80%92%E5%BD%92/"/>
    
      <category term="Dp" scheme="http://pjpjsocute.github.io/tags/Dp/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-862</title>
    <link href="http://pjpjsocute.github.io/2023/05/12/LeetCode/LeetCode-381/"/>
    <id>http://pjpjsocute.github.io/2023/05/12/LeetCode/LeetCode-381/</id>
    <published>2023-05-12T09:14:10.000Z</published>
    <updated>2023-05-12T16:30:33.255Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Q"><a href="#Q" class="headerlink" title="Q:"></a>Q:</h3><p><code>RandomizedCollection</code> 是一种包含数字集合(可能是重复的)的数据结构。它应该支持插入和删除特定元素，以及删除随机元素。</p><p>实现 <code>RandomizedCollection</code> 类:</p><ul><li><code>RandomizedCollection()</code>初始化空的 <code>RandomizedCollection</code> 对象。</li><li><code>bool insert(int val)</code> 将一个 <code>val</code> 项插入到集合中，即使该项已经存在。如果该项不存在，则返回 <code>true</code> ，否则返回 <code>false</code> 。</li><li><code>bool remove(int val)</code> 如果存在，从集合中移除一个 <code>val</code> 项。如果该项存在，则返回 <code>true</code> ，否则返回 <code>false</code> 。注意，如果 <code>val</code> 在集合中出现多次，我们只删除其中一个。</li><li><code>int getRandom()</code> 从当前的多个元素集合中返回一个随机元素。每个元素被返回的概率与集合中包含的相同值的数量 <strong>线性相关</strong> 。</li></ul><p>您必须实现类的函数，使每个函数的 <strong>平均</strong> 时间复杂度为 <code>O(1)</code> 。</p><p><strong>注意：</strong>生成测试用例时，只有在 <code>RandomizedCollection</code> 中 <strong>至少有一项</strong> 时，才会调用 <code>getRandom</code> 。</p><span id="more"></span><h3 id="Input"><a href="#Input" class="headerlink" title="Input:"></a>Input:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">输入</span><br><span class="line">[&quot;RandomizedCollection&quot;, &quot;insert&quot;, &quot;insert&quot;, &quot;insert&quot;, &quot;getRandom&quot;, &quot;remove&quot;, &quot;getRandom&quot;]</span><br><span class="line">[[], [1], [1], [2], [], [1], []]</span><br><span class="line">输出</span><br><span class="line">[null, true, false, true, 2, true, 1]</span><br><span class="line"></span><br><span class="line">解释</span><br><span class="line">RandomizedCollection collection = new RandomizedCollection();// 初始化一个空的集合。</span><br><span class="line">collection.insert(1);   // 返回 true，因为集合不包含 1。</span><br><span class="line">                        // 将 1 插入到集合中。</span><br><span class="line">collection.insert(1);   // 返回 false，因为集合包含 1。</span><br><span class="line">                        // 将另一个 1 插入到集合中。集合现在包含 [1,1]。</span><br><span class="line">collection.insert(2);   // 返回 true，因为集合不包含 2。</span><br><span class="line">                        // 将 2 插入到集合中。集合现在包含 [1,1,2]。</span><br><span class="line">collection.getRandom(); // getRandom 应当:</span><br><span class="line">                        // 有 2/3 的概率返回 1,</span><br><span class="line">                        // 1/3 的概率返回 2。</span><br><span class="line">collection.remove(1);   // 返回 true，因为集合包含 1。</span><br><span class="line">                        // 从集合中移除 1。集合现在包含 [1,2]。</span><br><span class="line">collection.getRandom(); // getRandom 应该返回 1 或 2，两者的可能性相同。</span><br></pre></td></tr></table></figure><h3 id="S"><a href="#S" class="headerlink" title="S:"></a>S:</h3><p>因为题目插入时需要查找值是否存在，所以我们需要实现查找为O1，那么有list和hashmap（list通过索引）可以完成。</p><p>但是由于list无法直接O1查找元素值，所以可以考虑list和hashmap联合使用。</p><p>map存（值，索引），list存值。 </p><p>由于list只有在删除尾元素时能够实现O1，所以我们可以将待删除元素与队尾元素互换，然后删除 map中存的是值与索引键值对。</p><p>因为一个值可能存在多个索引，所以索引也需要用一个集合封装。</p><p> 考虑到一个值不会有2个相同索引，并且在删除交换等操作时需要对值得索引也进行删除等操作，所以使用set来保存索引序列</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RandomizedCollection</span> &#123;</span><br><span class="line">    <span class="type">int</span> n ;<span class="comment">//当前集合大小</span></span><br><span class="line">    HashMap&lt;Integer,Set&lt;Integer&gt;&gt;map;</span><br><span class="line">    ArrayList&lt;Integer&gt;list;</span><br><span class="line">    Random random;</span><br><span class="line">    <span class="comment">/** Initialize your data structure here. */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RandomizedCollection</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.random = <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="built_in">this</span>.map = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="built_in">this</span>.n = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">this</span>.list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Inserts a value to the collection. Returns true if the collection did not already contain the specified element. */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">insert</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="type">Set</span> <span class="variable">set</span> <span class="operator">=</span> map.get(val);</span><br><span class="line">        <span class="keyword">if</span>(set==<span class="literal">null</span>)   set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        set.add(n);<span class="comment">//添加索引</span></span><br><span class="line">        list.add(val);</span><br><span class="line">        map.put(val, set);</span><br><span class="line">        n++;</span><br><span class="line">        <span class="keyword">return</span> set.size()==<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Removes a value from the collection. Returns true if the collection contained the specified element. */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(map.containsKey(val))&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">lastIndex</span> <span class="operator">=</span> n-<span class="number">1</span>;<span class="comment">//得到最后2个值索引</span></span><br><span class="line">            <span class="type">Set</span> <span class="variable">lastset</span> <span class="operator">=</span> map.get(list.get(lastIndex));</span><br><span class="line">            <span class="type">Set</span> <span class="variable">set</span> <span class="operator">=</span> map.get(val);</span><br><span class="line">            <span class="type">int</span> <span class="variable">currIndex</span> <span class="operator">=</span> (<span class="type">int</span>)set.iterator().next();<span class="comment">//得到当前值索引</span></span><br><span class="line">            <span class="comment">//进行删除操作</span></span><br><span class="line">            swap(list, currIndex, lastIndex);</span><br><span class="line">            list.remove(n-<span class="number">1</span>);<span class="comment">//将其在列表中删除</span></span><br><span class="line">            set.remove(currIndex);<span class="comment">//删除原值</span></span><br><span class="line">            <span class="keyword">if</span>(set.size()==<span class="number">0</span>)   map.remove(val);<span class="comment">//在图中删除</span></span><br><span class="line">            <span class="comment">//修改最后一个值的索引</span></span><br><span class="line">            lastset.remove(n-<span class="number">1</span>);</span><br><span class="line">            lastset.add(currIndex);</span><br><span class="line">            n--;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Get a random element from the collection. */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getRandom</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list.get(random.nextInt(n));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(List&lt;Integer&gt; list ,<span class="type">int</span> i,<span class="type">int</span> j)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> list.get(i);</span><br><span class="line">        list.set(i, list.get(j));</span><br><span class="line">        list.set(j, temp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Q&quot;&gt;&lt;a href=&quot;#Q&quot; class=&quot;headerlink&quot; title=&quot;Q:&quot;&gt;&lt;/a&gt;Q:&lt;/h3&gt;&lt;p&gt;&lt;code&gt;RandomizedCollection&lt;/code&gt; 是一种包含数字集合(可能是重复的)的数据结构。它应该支持插入和删除特定元素，以及删除随机元素。&lt;/p&gt;
&lt;p&gt;实现 &lt;code&gt;RandomizedCollection&lt;/code&gt; 类:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;RandomizedCollection()&lt;/code&gt;初始化空的 &lt;code&gt;RandomizedCollection&lt;/code&gt; 对象。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bool insert(int val)&lt;/code&gt; 将一个 &lt;code&gt;val&lt;/code&gt; 项插入到集合中，即使该项已经存在。如果该项不存在，则返回 &lt;code&gt;true&lt;/code&gt; ，否则返回 &lt;code&gt;false&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bool remove(int val)&lt;/code&gt; 如果存在，从集合中移除一个 &lt;code&gt;val&lt;/code&gt; 项。如果该项存在，则返回 &lt;code&gt;true&lt;/code&gt; ，否则返回 &lt;code&gt;false&lt;/code&gt; 。注意，如果 &lt;code&gt;val&lt;/code&gt; 在集合中出现多次，我们只删除其中一个。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int getRandom()&lt;/code&gt; 从当前的多个元素集合中返回一个随机元素。每个元素被返回的概率与集合中包含的相同值的数量 &lt;strong&gt;线性相关&lt;/strong&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;您必须实现类的函数，使每个函数的 &lt;strong&gt;平均&lt;/strong&gt; 时间复杂度为 &lt;code&gt;O(1)&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;生成测试用例时，只有在 &lt;code&gt;RandomizedCollection&lt;/code&gt; 中 &lt;strong&gt;至少有一项&lt;/strong&gt; 时，才会调用 &lt;code&gt;getRandom&lt;/code&gt; 。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://pjpjsocute.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="java" scheme="http://pjpjsocute.github.io/tags/java/"/>
    
      <category term="数据结构" scheme="http://pjpjsocute.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="力扣之旅" scheme="http://pjpjsocute.github.io/tags/%E5%8A%9B%E6%89%A3%E4%B9%8B%E6%97%85/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-862</title>
    <link href="http://pjpjsocute.github.io/2023/05/12/LeetCode/LeetCode-862/"/>
    <id>http://pjpjsocute.github.io/2023/05/12/LeetCode/LeetCode-862/</id>
    <published>2023-05-12T08:14:10.000Z</published>
    <updated>2023-05-12T08:26:38.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Q"><a href="#Q" class="headerlink" title="Q:"></a>Q:</h3><p>给你一个整数数组 <code>nums</code> 和一个整数 <code>k</code> ，找出 <code>nums</code> 中和至少为 <code>k</code> 的 <strong>最短非空子数组</strong> ，并返回该子数组的长度。如果不存在这样的 <strong>子数组</strong> ，返回 <code>-1</code> 。</p><p><strong>子数组</strong> 是数组中 <strong>连续</strong> 的一部分。</p><span id="more"></span><h3 id="Input"><a href="#Input" class="headerlink" title="Input:"></a>Input:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [2,-1,2], k = 3</span><br><span class="line">输出：3</span><br></pre></td></tr></table></figure><h3 id="S"><a href="#S" class="headerlink" title="S:"></a>S:</h3><p>​    求连续子序列的和，很容易想到使用前缀和。</p><p>​    因为数组是存在正负的，所以无法使用二分，而暴力破解会超时。</p><h4 id="优化："><a href="#优化：" class="headerlink" title="优化："></a><strong>优化：</strong></h4><p>​    因为是求区间最短，可以很显然可以想到滑动窗，但是这个数组并不满足单调性：</p><p>​        数组中存在<strong>负数</strong>，导致窗口值<strong>不单调</strong>，但是因为有负数所以才会导致当我们找到某个窗口和为K，窗内依然可能存在可行解，原因如下：</p><p>​    <strong>对于索引$i_j$前面满足≥K的所有索引${i_{0-j}}$，</strong></p><p>​    <strong>如果$i_1$&lt;$i_2$，arr[$i_1$]&gt;arr[$i_2$],</strong></p><p>​    <strong>那么可行解一定是$i_2$，</strong></p><p>​    <strong>因为$i_2$更大且arr[$i_2$]更小</strong></p><p>所以<strong>我们可以维护一个单调队列保证窗口内值的单调性：</strong></p><h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><p>​    基于我们总是希望对于每个右指针j，左指针能够尽可能的靠近，并且值尽可能地大。</p><p>​    如果有一个i-1的值 &gt;i 处的值，那么i-1处的值就一定不是正确解，因为i处的值更近并且能够得到的数组和更大，如果i-1满足i一定满足，以此来减少我们的判断量</p><p>​    如果队首的值满足当前值-队首值&gt;=K,记录长度并弹出队首</p><p>​    如果当前值&lt;队列尾，那么弹出队尾保持队列单调</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">shortestSubarray</span><span class="params">(<span class="type">int</span>[] A, <span class="type">int</span> K)</span> &#123;</span><br><span class="line">        <span class="type">long</span> [] arr = <span class="keyword">new</span> <span class="title class_">long</span> [A.length+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;A.length;i++)&#123;</span><br><span class="line">            arr[i+<span class="number">1</span>] = arr[i]+A[i];</span><br><span class="line">            <span class="keyword">if</span>(A[i]&gt;=K) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="comment">//得到前缀和数组/ get pre sum</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">        <span class="comment">// for(int i=0;i&lt;=A.length-1;i++)&#123;  //暴力破解 N^2 超时/O(N^2) out time</span></span><br><span class="line">        <span class="comment">//     for(int j = i+1;j&lt;=A.length;j++)&#123;</span></span><br><span class="line">        <span class="comment">//         if(arr[j]-arr[i]&gt;=K)&#123;</span></span><br><span class="line">        <span class="comment">//             res = Math.min(j-i,res);</span></span><br><span class="line">        <span class="comment">//         &#125;</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">      </span><br><span class="line">        Deque&lt;Integer&gt; queue = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">            <span class="keyword">while</span>(!queue.isEmpty()&amp;&amp;arr[i]&lt;=arr[queue.getLast()])   queue.removeLast();</span><br><span class="line">            <span class="keyword">while</span>(!queue.isEmpty()&amp;&amp;arr[i]-arr[queue.peek()]&gt;=K)    res = Math.min(res,i-queue.poll());</span><br><span class="line">            queue.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res==Integer.MAX_VALUE?-<span class="number">1</span>:res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Q&quot;&gt;&lt;a href=&quot;#Q&quot; class=&quot;headerlink&quot; title=&quot;Q:&quot;&gt;&lt;/a&gt;Q:&lt;/h3&gt;&lt;p&gt;给你一个整数数组 &lt;code&gt;nums&lt;/code&gt; 和一个整数 &lt;code&gt;k&lt;/code&gt; ，找出 &lt;code&gt;nums&lt;/code&gt; 中和至少为 &lt;code&gt;k&lt;/code&gt; 的 &lt;strong&gt;最短非空子数组&lt;/strong&gt; ，并返回该子数组的长度。如果不存在这样的 &lt;strong&gt;子数组&lt;/strong&gt; ，返回 &lt;code&gt;-1&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;子数组&lt;/strong&gt; 是数组中 &lt;strong&gt;连续&lt;/strong&gt; 的一部分。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://pjpjsocute.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="java" scheme="http://pjpjsocute.github.io/tags/java/"/>
    
      <category term="力扣之旅" scheme="http://pjpjsocute.github.io/tags/%E5%8A%9B%E6%89%A3%E4%B9%8B%E6%97%85/"/>
    
      <category term="前缀和" scheme="http://pjpjsocute.github.io/tags/%E5%89%8D%E7%BC%80%E5%92%8C/"/>
    
      <category term="单调队列" scheme="http://pjpjsocute.github.io/tags/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-406</title>
    <link href="http://pjpjsocute.github.io/2023/05/12/LeetCode/LeetCode-406/"/>
    <id>http://pjpjsocute.github.io/2023/05/12/LeetCode/LeetCode-406/</id>
    <published>2023-05-12T08:13:50.000Z</published>
    <updated>2023-05-12T08:16:05.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Q"><a href="#Q" class="headerlink" title="Q:"></a>Q:</h3><p>假设有打乱顺序的一群人站成一个队列，数组 <code>people</code> 表示队列中一些人的属性（不一定按顺序）。每个 <code>people[i] = [hi, ki]</code> 表示第 <code>i</code> 个人的身高为 <code>hi</code> ，前面 <strong>正好</strong> 有 <code>ki</code> 个身高大于或等于 <code>hi</code> 的人。</p><p>请你重新构造并返回输入数组 <code>people</code> 所表示的队列。返回的队列应该格式化为数组 <code>queue</code> ，其中 <code>queue[j] = [hj, kj]</code> 是队列中第 <code>j</code> 个人的属性（<code>queue[0]</code> 是排在队列前面的人）。</p><span id="more"></span><h4 id="Input"><a href="#Input" class="headerlink" title="Input:"></a>Input:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">输入：people = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]</span><br><span class="line">输出：[[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]</span><br><span class="line">解释：</span><br><span class="line">编号为 0 的人身高为 5 ，没有身高更高或者相同的人排在他前面。</span><br><span class="line">编号为 1 的人身高为 7 ，没有身高更高或者相同的人排在他前面。</span><br><span class="line">编号为 2 的人身高为 5 ，有 2 个身高更高或者相同的人排在他前面，即编号为 0 和 1 的人。</span><br><span class="line">编号为 3 的人身高为 6 ，有 1 个身高更高或者相同的人排在他前面，即编号为 1 的人。</span><br><span class="line">编号为 4 的人身高为 4 ，有 4 个身高更高或者相同的人排在他前面，即编号为 0、1、2、3 的人。</span><br><span class="line">编号为 5 的人身高为 7 ，有 1 个身高更高或者相同的人排在他前面，即编号为 1 的人。</span><br><span class="line">因此 [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] 是重新构造后的队列。</span><br></pre></td></tr></table></figure><h3 id="S"><a href="#S" class="headerlink" title="S:"></a>S:</h3><p>一个人有&lt;h,k&gt;2个属性，h代表高度，同样的高度的前提下，k大的人应该在后面。 为了确定&lt;h,i&gt;应该去哪，我们可以考虑倒排身高，这样前面有多少个比他高的人就已知了。 假设某个队列排到&lt;h,i&gt;，对于已插入的前面的人来说，身高都≥他，所以当他插入第i个位置的时候，对其他人是不产生影响的（因为当身高一致,i会正序排序）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[][] reconstructQueue(<span class="type">int</span>[][] people) &#123;</span><br><span class="line">        Arrays.sort(people,<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;<span class="type">int</span>[]&gt;()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">int</span>[] o1, <span class="type">int</span> [] o2)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> o1[<span class="number">0</span>]==o2[<span class="number">0</span>]?o1[<span class="number">1</span>]-o2[<span class="number">1</span>]:o2[<span class="number">0</span>]-o1[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        List&lt;<span class="type">int</span>[]&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> [] peo:people)&#123;</span><br><span class="line">            res.add(peo[<span class="number">1</span>], peo);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res.toArray(<span class="keyword">new</span> <span class="title class_">int</span> [res.size()][<span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Q&quot;&gt;&lt;a href=&quot;#Q&quot; class=&quot;headerlink&quot; title=&quot;Q:&quot;&gt;&lt;/a&gt;Q:&lt;/h3&gt;&lt;p&gt;假设有打乱顺序的一群人站成一个队列，数组 &lt;code&gt;people&lt;/code&gt; 表示队列中一些人的属性（不一定按顺序）。每个 &lt;code&gt;people[i] = [hi, ki]&lt;/code&gt; 表示第 &lt;code&gt;i&lt;/code&gt; 个人的身高为 &lt;code&gt;hi&lt;/code&gt; ，前面 &lt;strong&gt;正好&lt;/strong&gt; 有 &lt;code&gt;ki&lt;/code&gt; 个身高大于或等于 &lt;code&gt;hi&lt;/code&gt; 的人。&lt;/p&gt;
&lt;p&gt;请你重新构造并返回输入数组 &lt;code&gt;people&lt;/code&gt; 所表示的队列。返回的队列应该格式化为数组 &lt;code&gt;queue&lt;/code&gt; ，其中 &lt;code&gt;queue[j] = [hj, kj]&lt;/code&gt; 是队列中第 &lt;code&gt;j&lt;/code&gt; 个人的属性（&lt;code&gt;queue[0]&lt;/code&gt; 是排在队列前面的人）。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://pjpjsocute.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="java" scheme="http://pjpjsocute.github.io/tags/java/"/>
    
      <category term="力扣之旅" scheme="http://pjpjsocute.github.io/tags/%E5%8A%9B%E6%89%A3%E4%B9%8B%E6%97%85/"/>
    
  </entry>
  
  <entry>
    <title>KMP algorithm</title>
    <link href="http://pjpjsocute.github.io/2023/05/12/algorithm/KMP-algorithm/"/>
    <id>http://pjpjsocute.github.io/2023/05/12/algorithm/KMP-algorithm/</id>
    <published>2023-05-12T07:44:17.000Z</published>
    <updated>2023-05-12T08:09:07.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法:"></a>KMP算法:</h3><p>​    KMP (Knuth-Morris-Pratt) 算法是一种用于字符串搜索的算法，可以在一个文本串S内查找一个词W的出现位置。</p><p>基本思想是，当子串与目标字符串不匹配时，其已知足够的信息能确定下一步的搜索不会导致目标字符串的漏检。这样，算法就不会进行无效的检查。</p><p>下面是KMP算法的步骤：</p><ol><li>构造一个”部分匹配表”（也称为 “失败函数”）。这是一个数组，对于给定的查找词，表中的每个元素都包含了当匹配失败时查找词应该跳转的位置。</li><li>使用这个表来进行字符串搜索。当在文本串中发生匹配失败时，可以直接跳过前面已知不会匹配的部分。</li></ol><span id="more"></span><h3 id="Why-KMP"><a href="#Why-KMP" class="headerlink" title="Why KMP"></a>Why KMP</h3><p>​    传统的字符串匹配，如果从String[i]的比较失败，算法直接开始尝试从S[i+1]进行比较。这种行为是典型的 “不从以前的错误中学习”。我们应该注意到，一个失败的匹配将为我们提供有价值的信息–<strong>如果String[i : i+len(P)]和P之间的匹配在第r个位置失败，那么从S[i]：第一个（r-1）连续字符必须与P的第一个（r-1）字符完全相同</strong>。</p><p><img src="/2023/05/12/algorithm/KMP-algorithm/1677815997905-1cc35396-f8b9-4cd8-9eeb-e583c804f942.jpeg" alt></p><p>​    因此，我们可以尽可能地跳过这些不可能的字符串来优化我们的方法。<br>举个例子：</p><p><img src="/2023/05/12/algorithm/KMP-algorithm/1677830257055-487dcd00-8b04-4467-a430-34fbb1285c8e.jpeg" alt></p><p>​    首先，P[5]未能匹配，那么这意味着S[0:5]等于P[0:5]，也就是 “abcab”。<br>现在我们考虑：从S[1]，S[2]，S[3]最初的匹配尝试是否有机会成功？<br>当我们从S[1]开始时，它不会成功。因为我们可以看到：P[1]！=P[0]，但P[1]=S[1]，所以P[0]！=S[1]。<br>在S[2]中也是如此。<br>但是当我们从S[3]开始时（这很重要）： <strong>P[0] = P[3], S[3] = P[3], 所以P[0] = S[3].</strong><br>我们可以发现，在S[3]中，有可能匹配成功。而且我们会发现，如果知道S和P在长度L内是相同的，那么任何一个i是否可以作为匹配的起点，只取决于P[0]=P[i]是否相等。这里我们可以得到KMP算法的核心下一个数组</p><h3 id="NextArray"><a href="#NextArray" class="headerlink" title="NextArray"></a>NextArray</h3><p>​    下一个数组是用于模式字符串。P的下一个数组定义为：： <strong>next[i]代表P[0]~P[i]的一个子串，因此前k个字符正好等于后k个字符的最大k。特别是，k不能是i+1 </strong>(因为这个子串总共只有i+1个字符，它必须等于它自己，所以它没有意义)。 <strong>事实上，它是为了得到不同起点i时P串中最长的相同前缀和后缀的最大长度</strong>。</p><p><img src="/2023/05/12/algorithm/KMP-algorithm/1677816850922-c3abca12-6649-486d-b8aa-71139dcbc716.jpeg" alt></p><h3 id="匹配"><a href="#匹配" class="headerlink" title="匹配"></a>匹配</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">getNext(needle,next);</span><br><span class="line"><span class="keyword">while</span> (i &lt; length &amp;&amp; j &lt; length1)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (j == -<span class="number">1</span> || haystack.charAt(i) == needle.charAt(j))</span><br><span class="line">    &#123;</span><br><span class="line">        i++;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        j = next[j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/05/12/algorithm/KMP-algorithm/1677827701314-03d97a1b-a666-4268-b392-cfa46e8bb70c.jpeg" alt></p><h4 id="首先：我们使用两个点来捕捉字符串。问题是如何改变这个点？"><a href="#首先：我们使用两个点来捕捉字符串。问题是如何改变这个点？" class="headerlink" title="首先：我们使用两个点来捕捉字符串。问题是如何改变这个点？"></a>首先：我们使用两个点来捕捉字符串。问题是如何改变这个点？</h4><h4 id="第二："><a href="#第二：" class="headerlink" title="第二："></a>第二：</h4><pre><code>String[i] != P [j] ,现在我们需要改变j来找到一个新的开始，即String的前缀等同于P。所以，下一个数组是有用的：` j = next[j]`。</code></pre><h3 id="如何获得下一个数组"><a href="#如何获得下一个数组" class="headerlink" title="如何获得下一个数组"></a>如何获得下一个数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">getNext</span><span class="params">(String p, <span class="type">int</span> [] next)</span></span><br><span class="line">    &#123;</span><br><span class="line">        next[<span class="number">0</span>] = -<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (i &lt; (p.length()))&#123;</span><br><span class="line">            <span class="keyword">if</span> (j == -<span class="number">1</span> || p.charAt(i)==p.charAt(j)) &#123;</span><br><span class="line">                ++i;</span><br><span class="line">                ++j;</span><br><span class="line">                next[i] = j;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                j = next[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>这段代码使用了一个小技巧：使next[0]=-1.你可以记住它，这将使代码更加容易；</strong></p><h3 id="动态规划："><a href="#动态规划：" class="headerlink" title="动态规划："></a>动态规划：</h3><p>next[i]是指p[0,next[i]]=p[i-next[i],i]的最大值(i)<br>那么，如果我们知道next[0],next[1],…next[i-1]，如何知道next[i]？<br>设置<code>next[i-1] = pre</code>。<br>如果<code>p[i]=p[pre+1]</code>，这意味着<code>下一个[i]=pre+1</code>。<br>否则如果<code>p[i] != p[pre+1],</code>就意味着<code>p[i-pre-1,i-1] = p[pre-1]</code>。<br>我们应该减少pre:<code>pre = next[pre]</code>。</p><p><img src="/2023/05/12/algorithm/KMP-algorithm/1677829808221-92178aa3-0c00-4c60-af02-dc14e6752b5b.jpeg" alt></p><h3 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * now we can use kmp algorithm，a prefix matching algorithm</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">strStr</span><span class="params">(String haystack, String needle)</span>&#123;</span><br><span class="line">        <span class="comment">//in first method,we can find that we need match all the substring if it&#x27;s not match.</span></span><br><span class="line">        <span class="comment">//some message have been lost: the prefix of the last string we have compared.</span></span><br><span class="line">        <span class="comment">//we can start with the same prefix string to match,so that the time can be saved</span></span><br><span class="line">        <span class="comment">// we can store the same prefix in a array or list, so we called kmp algorithm</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> haystack.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">length1</span> <span class="operator">=</span> needle.length();</span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> [] next = <span class="keyword">new</span> <span class="title class_">int</span> [length1];</span><br><span class="line">        getNext(needle,next);</span><br><span class="line">        <span class="keyword">while</span> (i &lt; length &amp;&amp; j &lt; length1)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (j == -<span class="number">1</span> || haystack.charAt(i) == needle.charAt(j))</span><br><span class="line">            &#123;</span><br><span class="line">                i++;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                j = next[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (j == length1)&#123;</span><br><span class="line">            <span class="keyword">return</span> i - j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">getNext</span><span class="params">(String p, <span class="type">int</span> [] next)</span></span><br><span class="line">    &#123;</span><br><span class="line">        next[<span class="number">0</span>] = -<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (i &lt; (p.length()))&#123;</span><br><span class="line">            <span class="keyword">if</span> (j == -<span class="number">1</span> || p.charAt(i)==p.charAt(j)) &#123;</span><br><span class="line">                ++i;</span><br><span class="line">                ++j;</span><br><span class="line">                next[i] = j;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                j = next[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;KMP算法&quot;&gt;&lt;a href=&quot;#KMP算法&quot; class=&quot;headerlink&quot; title=&quot;KMP算法:&quot;&gt;&lt;/a&gt;KMP算法:&lt;/h3&gt;&lt;p&gt;​    KMP (Knuth-Morris-Pratt) 算法是一种用于字符串搜索的算法，可以在一个文本串S内查找一个词W的出现位置。&lt;/p&gt;
&lt;p&gt;基本思想是，当子串与目标字符串不匹配时，其已知足够的信息能确定下一步的搜索不会导致目标字符串的漏检。这样，算法就不会进行无效的检查。&lt;/p&gt;
&lt;p&gt;下面是KMP算法的步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;构造一个”部分匹配表”（也称为 “失败函数”）。这是一个数组，对于给定的查找词，表中的每个元素都包含了当匹配失败时查找词应该跳转的位置。&lt;/li&gt;
&lt;li&gt;使用这个表来进行字符串搜索。当在文本串中发生匹配失败时，可以直接跳过前面已知不会匹配的部分。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="技术" scheme="http://pjpjsocute.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="java" scheme="http://pjpjsocute.github.io/tags/java/"/>
    
      <category term="算法" scheme="http://pjpjsocute.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>chatGPT with confluence</title>
    <link href="http://pjpjsocute.github.io/2023/05/12/algorithm/chatGPT-with-confluence/"/>
    <id>http://pjpjsocute.github.io/2023/05/12/algorithm/chatGPT-with-confluence/</id>
    <published>2023-05-12T07:44:05.000Z</published>
    <updated>2023-05-12T07:57:11.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Target"><a href="#Target" class="headerlink" title="Target:"></a>Target:</h3><p>由于工作时Confluence中的文件太多，也比较杂乱，难以阅读，所以希望基于chatGPT能够帮助我快速从文件中获取我想要的知识</p><span id="more"></span><p>以下是一个demo的代码，参考了GPT官网的做法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##爬虫</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"><span class="keyword">from</span> html.parser <span class="keyword">import</span> HTMLParser</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlparse</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> html2text</span><br><span class="line"><span class="keyword">from</span> atlassian <span class="keyword">import</span> Confluence</span><br><span class="line"><span class="keyword">import</span> tiktoken</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> openai</span><br><span class="line"><span class="keyword">from</span> openai.embeddings_utils <span class="keyword">import</span> distances_from_embeddings</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> openai.embeddings_utils <span class="keyword">import</span> distances_from_embeddings, cosine_similarity</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># public 的账号 和confluence空间配置</span></span><br><span class="line">domain = <span class="string">&quot;confluence.xxxxx.com&quot;</span></span><br><span class="line">full_url = <span class="string">&quot;https://confluence.xxxxx.com/&quot;</span></span><br><span class="line">login_url = <span class="string">&quot;https://confluence.xxxxx.com/login.action?os_destination=%2Fdologin.action&quot;</span></span><br><span class="line">page_url = <span class="string">&quot;https://confluence.xxxxx.com/display/41JTSP/&quot;</span></span><br><span class="line">user_name = <span class="string">&quot;xxxx&quot;</span></span><br><span class="line">password = <span class="string">&quot;xxxx&quot;</span></span><br><span class="line"><span class="comment"># 定义要爬取的空间key，这是目前我们的空间</span></span><br><span class="line">space_key = <span class="string">&quot;xxxx&quot;</span></span><br><span class="line"><span class="comment">##数据保存地址，请自定义</span></span><br><span class="line">filePath = <span class="string">&quot;&quot;</span></span><br><span class="line">processPath = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##分隔符和替换符，主要用于文件名生成和标题还原</span></span><br><span class="line">splitFlag = <span class="string">&quot;$&quot;</span></span><br><span class="line">replaceFlag = <span class="string">&quot;_&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##设置openai环境</span></span><br><span class="line">openai.organization = <span class="string">&quot;&quot;</span></span><br><span class="line">openai.api_key = <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">crawler</span>(<span class="params">base_url,username,password,space_key,totalSpace = <span class="literal">False</span></span>):</span><br><span class="line">    confluence = Confluence(url=base_url, username=username, password=password)</span><br><span class="line">    <span class="comment">##待实现，爬取所有的space</span></span><br><span class="line">    <span class="comment">##获取对应空间</span></span><br><span class="line">    space = confluence.get_space(space_key, expand=<span class="string">&#x27;description.plain,homepage&#x27;</span>)</span><br><span class="line">    <span class="comment">##获取space页面id</span></span><br><span class="line">    page_id = space[<span class="string">&quot;homepage&quot;</span>][<span class="string">&quot;id&quot;</span>]</span><br><span class="line">    </span><br><span class="line">        <span class="comment"># Create a directory to store the text files</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(filePath):</span><br><span class="line">            os.mkdir(filePath)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Create a directory to store the csv files</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(processPath):</span><br><span class="line">            os.mkdir(processPath)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">##子页面</span></span><br><span class="line">    child = confluence.get_page_child_by_type(page_id, <span class="built_in">type</span>=<span class="string">&#x27;page&#x27;</span>, start=<span class="literal">None</span>, limit=<span class="literal">None</span>, expand=<span class="literal">None</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">##初始化队列</span></span><br><span class="line">    queue = deque()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> child:</span><br><span class="line">        queue.append(i)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> queue:</span><br><span class="line">        <span class="comment"># Get the next URL from the queue</span></span><br><span class="line">        childPage = queue.pop()</span><br><span class="line">        <span class="comment">##拿到页面id</span></span><br><span class="line">        html = confluence.get_page_by_id(childPage[<span class="string">&quot;id&quot;</span>], expand=<span class="string">&quot;body.storage&quot;</span>)</span><br><span class="line">        <span class="comment"># 调用方法，将html转为纯文本</span></span><br><span class="line">        content = html[<span class="string">&quot;body&quot;</span>][<span class="string">&quot;storage&quot;</span>][<span class="string">&quot;value&quot;</span>]</span><br><span class="line">        content_text = html2text.html2text(content)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">##文本不为空写入</span></span><br><span class="line">        <span class="keyword">if</span> content_text.lstrip() != <span class="string">&quot;&quot;</span>:</span><br><span class="line">            title = <span class="built_in">str</span>(html[<span class="string">&quot;title&quot;</span>]).replace(<span class="string">&quot;/&quot;</span>,replaceFlag)</span><br><span class="line">    <span class="comment">#         if not os.path.exists(&quot;/Users/lei.zhou/text/&quot;+html[&quot;title&quot;]):</span></span><br><span class="line">    <span class="comment">#             os.mkdir(&quot;/Users/lei.zhou/text/&quot;)</span></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(filePath+ childPage[<span class="string">&quot;id&quot;</span>]+splitFlag+title+ <span class="string">&quot;.txt&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(content_text)</span><br><span class="line"></span><br><span class="line">        <span class="comment">##加入子节点‘</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> confluence.get_page_child_by_type(childPage[<span class="string">&quot;id&quot;</span>], <span class="built_in">type</span>=<span class="string">&#x27;page&#x27;</span>, start=<span class="literal">None</span>, limit=<span class="literal">None</span>, expand=<span class="literal">None</span>):</span><br><span class="line">            queue.append(i)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line">max_tokens = <span class="number">500</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">remove_newlines</span>(<span class="params">serie</span>):</span><br><span class="line">    serie = serie.<span class="built_in">str</span>.replace(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    serie = serie.<span class="built_in">str</span>.replace(<span class="string">&#x27;\\n&#x27;</span>, <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    serie = serie.<span class="built_in">str</span>.replace(<span class="string">&#x27;  &#x27;</span>, <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    serie = serie.<span class="built_in">str</span>.replace(<span class="string">&#x27;  &#x27;</span>, <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> serie</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_context</span>(<span class="params"></span></span><br><span class="line"><span class="params">    question, df, max_len=<span class="number">1800</span>, size=<span class="string">&quot;ada&quot;</span></span></span><br><span class="line"><span class="params"></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    寻找最相似的文本段</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># Get the embeddings for the question</span></span><br><span class="line">    q_embeddings = openai.Embedding.create(<span class="built_in">input</span>=question, engine=<span class="string">&#x27;text-embedding-ada-002&#x27;</span>)[<span class="string">&#x27;data&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;embedding&#x27;</span>]</span><br><span class="line">    <span class="comment"># 使用余弦算法计算最相似的文本</span></span><br><span class="line">    df[<span class="string">&#x27;distances&#x27;</span>] = distances_from_embeddings(q_embeddings, df[<span class="string">&#x27;embeddings&#x27;</span>].values, distance_metric=<span class="string">&#x27;cosine&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    returns = []</span><br><span class="line">    cur_len = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 不断添加文本到上限</span></span><br><span class="line">    <span class="keyword">for</span> i, row <span class="keyword">in</span> df.sort_values(<span class="string">&#x27;distances&#x27;</span>, ascending=<span class="literal">True</span>).iterrows():</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 文本创建</span></span><br><span class="line">        cur_len += row[<span class="string">&#x27;n_tokens&#x27;</span>] + <span class="number">4</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 超出上限退出</span></span><br><span class="line">        <span class="keyword">if</span> cur_len &gt; max_len:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 增加文本</span></span><br><span class="line">        returns.append(row[<span class="string">&quot;text&quot;</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 返回</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;\n\n###\n\n&quot;</span>.join(returns)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># token分割</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">split_into_many</span>(<span class="params">text, max_tokens = max_tokens</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义分割符号，可以允许自定义</span></span><br><span class="line">    sentences = re.split(<span class="string">&#x27;[.。！？!?]&#x27;</span>,text)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取每段的token</span></span><br><span class="line">    n_tokens = [<span class="built_in">len</span>(tokenizer.encode(<span class="string">&quot; &quot;</span> + sentence)) <span class="keyword">for</span> sentence <span class="keyword">in</span> sentences]</span><br><span class="line">    </span><br><span class="line">    chunks = []</span><br><span class="line">    tokens_so_far = <span class="number">0</span></span><br><span class="line">    chunk = []</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 遍历</span></span><br><span class="line">    <span class="keyword">for</span> sentence, token <span class="keyword">in</span> <span class="built_in">zip</span>(sentences, n_tokens):</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果到目前为止的标记数量加上当前句子中的标记数量大于,大于最大标记数，则将该块添加到块的列表中，并重置到目前为止的块和标记数</span></span><br><span class="line">        <span class="keyword">if</span> tokens_so_far + token &gt; max_tokens:</span><br><span class="line">            chunks.append(<span class="string">&quot;. &quot;</span>.join(chunk) + <span class="string">&quot;.&quot;</span>)</span><br><span class="line">            chunk = []</span><br><span class="line">            tokens_so_far = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> token &gt; max_tokens:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 添加</span></span><br><span class="line">        chunk.append(sentence)</span><br><span class="line">        tokens_so_far += token + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> chunks</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##数据，模型，问题，长度，</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">answer_question</span>(<span class="params"></span></span><br><span class="line"><span class="params">    df,</span></span><br><span class="line"><span class="params">    model=<span class="string">&quot;text-davinci-003&quot;</span>,</span></span><br><span class="line"><span class="params">    question=<span class="string">&quot;你有什么问题&quot;</span>,</span></span><br><span class="line"><span class="params">    max_len=<span class="number">1800</span>,</span></span><br><span class="line"><span class="params">    size=<span class="string">&quot;ada&quot;</span>,</span></span><br><span class="line"><span class="params">    debug=<span class="literal">False</span>,</span></span><br><span class="line"><span class="params">    max_tokens=<span class="number">1800</span>,</span></span><br><span class="line"><span class="params">    stop_sequence=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    use_GPT=<span class="literal">False</span></span></span><br><span class="line"><span class="params"></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    回答问题</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    context = create_context(</span><br><span class="line">        question,</span><br><span class="line">        df,</span><br><span class="line">        max_len=max_len,</span><br><span class="line">        size=size,</span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># If debug, print the raw model response</span></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Context:\n&quot;</span> + context)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n\n&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Answer the question based on the context below, and if the question can&#x27;t be answered based on the context, say \&quot;I don&#x27;t know\&quot;\n\nContext: <span class="subst">&#123;context&#125;</span>\n\n---\n\nQuestion: <span class="subst">&#123;question&#125;</span>\nAnswer:&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> use_GPT:</span><br><span class="line">        completion = openai.ChatCompletion.create(model=<span class="string">&quot;gpt-3.5-turbo&quot;</span>,messages=[</span><br><span class="line">    &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">f&quot;Answer the question based on the context below, and if the question can&#x27;t be answered based on the context, say \&quot;I don&#x27;t know\&quot;\n\nContext: <span class="subst">&#123;context&#125;</span>\n\n---\n\nQuestion: <span class="subst">&#123;question&#125;</span>\nAnswer:&quot;</span>&#125;])</span><br><span class="line">        <span class="keyword">return</span> completion.to_dict()[<span class="string">&quot;choices&quot;</span>][<span class="number">0</span>][<span class="string">&quot;message&quot;</span>][<span class="string">&quot;content&quot;</span>]</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># Create a completions using the question and context</span></span><br><span class="line">        response = openai.Completion.create(</span><br><span class="line">            prompt=<span class="string">f&quot;Answer the question based on the context below, and if the question can&#x27;t be answered based on the context, say \&quot;I don&#x27;t know\&quot;\n\nContext: <span class="subst">&#123;context&#125;</span>\n\n---\n\nQuestion: <span class="subst">&#123;question&#125;</span>\nAnswer:&quot;</span>,</span><br><span class="line">            temperature=<span class="number">0</span>,</span><br><span class="line">            max_tokens=max_tokens,</span><br><span class="line">            top_p=<span class="number">1</span>,</span><br><span class="line">            frequency_penalty=<span class="number">0</span>,</span><br><span class="line">            presence_penalty=<span class="number">0</span>,</span><br><span class="line">            stop=stop_sequence,</span><br><span class="line">            model=model,</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span> response[<span class="string">&quot;choices&quot;</span>][<span class="number">0</span>][<span class="string">&quot;text&quot;</span>].strip()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crawler(base_url,username,password,space_key)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#原始文本</span></span><br><span class="line">texts=[]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历</span></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> os.listdir(filePath):</span><br><span class="line">    <span class="comment"># 文件读取</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filePath+file, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        titles = file.split(splitFlag)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(titles) &lt;= <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        title = titles[<span class="number">1</span>]</span><br><span class="line">        text = f.read()</span><br><span class="line">        <span class="comment"># 标题还原，把_替换为空格插入</span></span><br><span class="line">        texts.append((title.replace(replaceFlag,<span class="string">&quot; &quot;</span>), text))</span><br><span class="line">        </span><br><span class="line"><span class="comment"># pd创建</span></span><br><span class="line">df = pd.DataFrame(texts, columns = [<span class="string">&#x27;fname&#x27;</span>, <span class="string">&#x27;text&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按行分段</span></span><br><span class="line">df[<span class="string">&#x27;text&#x27;</span>] = df.fname + <span class="string">&quot;. &quot;</span> + remove_newlines(df.text)</span><br><span class="line">df.to_csv(<span class="string">&#x27;processed/scraped.csv&#x27;</span>)</span><br><span class="line">df.head()</span><br></pre></td></tr></table></figure><p></p><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>fname</th><br>      <th>text</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>2022-12-15【VWASP】【IDP】Scan qrcode login HU to …</td><br>      <td>2022-12-15【VWASP】【IDP】Scan qrcode login HU to …</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>2022-12-19   【VWASP】【StartupBroadcasting】Conte…</td><br>      <td>2022-12-19   【VWASP】【StartupBroadcasting】Conte…</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>bak.B1.1 Payment Center Integration Test Repor…</td><br>      <td>bak.B1.1 Payment Center Integration Test Repor…</td><br>    </tr><br>    <tr><br>      <th>3</th><br>      <td>2022-03-15  [VWASP] 【ULH】DP token exchange wit…</td><br>      <td>2022-03-15  [VWASP] 【ULH】DP token exchange wit…</td><br>    </tr><br>    <tr><br>      <th>4</th><br>      <td>OnlineRadio and OlineMusic B0.2 testcase revie…</td><br>      <td>OnlineRadio and OlineMusic B0.2 testcase revie…</td><br>    </tr><br>  </tbody><br></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">tokenizer = tiktoken.get_encoding(<span class="string">&quot;cl100k_base&quot;</span>)</span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;processed/scraped.csv&#x27;</span>, index_col=<span class="number">0</span>)</span><br><span class="line">df.columns = [<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;text&#x27;</span>]</span><br><span class="line"></span><br><span class="line">df[<span class="string">&#x27;n_tokens&#x27;</span>] = df.text.apply(<span class="keyword">lambda</span> x: <span class="built_in">len</span>(tokenizer.encode(x)))</span><br><span class="line"></span><br><span class="line">df</span><br></pre></td></tr></table></figure><p></p><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>title</th><br>      <th>text</th><br>      <th>n_tokens</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>2022-12-15【VWASP】【IDP】Scan qrcode login HU to …</td><br>      <td>2022-12-15【VWASP】【IDP】Scan qrcode login HU to …</td><br>      <td>1423</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>2022-12-19   【VWASP】【StartupBroadcasting】Conte…</td><br>      <td>2022-12-19   【VWASP】【StartupBroadcasting】Conte…</td><br>      <td>1355</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>bak.B1.1 Payment Center Integration Test Repor…</td><br>      <td>bak.B1.1 Payment Center Integration Test Repor…</td><br>      <td>1106</td><br>    </tr><br>    <tr><br>      <th>3</th><br>      <td>2022-03-15  [VWASP] 【ULH】DP token exchange wit…</td><br>      <td>2022-03-15  [VWASP] 【ULH】DP token exchange wit…</td><br>      <td>1429</td><br>    </tr><br>    <tr><br>      <th>4</th><br>      <td>OnlineRadio and OlineMusic B0.2 testcase revie…</td><br>      <td>OnlineRadio and OlineMusic B0.2 testcase revie…</td><br>      <td>2736</td><br>    </tr><br>    <tr><br>      <th>…</th><br>      <td>…</td><br>      <td>…</td><br>      <td>…</td><br>    </tr><br>    <tr><br>      <th>412</th><br>      <td>B1 OnePortal Qulification Test Report.txt</td><br>      <td>B1 OnePortal Qulification Test Report.txt.   #…</td><br>      <td>966</td><br>    </tr><br>    <tr><br>      <th>413</th><br>      <td>Detailed Solution Architecture.txt</td><br>      <td>Detailed Solution Architecture.txt. 250</td><br>      <td>8</td><br>    </tr><br>    <tr><br>      <th>414</th><br>      <td>B1.3 Release.txt</td><br>      <td>B1.3 Release.txt. true</td><br>      <td>9</td><br>    </tr><br>    <tr><br>      <th>415</th><br>      <td>04  B1验收Charging&amp;RBC.txt</td><br>      <td>04  B1验收Charging&amp;RBC.txt.  L1| L2| L3| | | L4|…</td><br>      <td>1492</td><br>    </tr><br>    <tr><br>      <th>416</th><br>      <td>ULH - Integration Outline and API-Specificatio…</td><br>      <td>ULH - Integration Outline and API-Specificatio…</td><br>      <td>38</td><br>    </tr><br>  </tbody><br></table><br><p>417 rows × 3 columns</p><br><br><br><br><br><br><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Tokenize the text and save the number of tokens to a new column</span></span><br><span class="line">df[<span class="string">&#x27;n_tokens&#x27;</span>] = df.text.apply(<span class="keyword">lambda</span> x: <span class="built_in">len</span>(tokenizer.encode(x)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Visualize the distribution of the number of tokens per row using a histogram</span></span><br><span class="line">df.n_tokens.hist()</span><br></pre></td></tr></table></figure><br><br><br><br><br>    <a href="AxesSubplot:">AxesSubplot:</a><br><br><br><br><br><img src="/2023/05/12/algorithm/chatGPT-with-confluence/output_7_1-3877587.png" alt="png"><br>​<br><br><br><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">shortened = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 循环减少文本</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> df.iterrows():</span><br><span class="line">    <span class="built_in">print</span>(row)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> row[<span class="number">1</span>][<span class="string">&#x27;text&#x27;</span>] <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> row[<span class="number">1</span>][<span class="string">&#x27;n_tokens&#x27;</span>] &gt; max_tokens:</span><br><span class="line">        shortened += split_into_many(row[<span class="number">1</span>][<span class="string">&#x27;text&#x27;</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        shortened.append( row[<span class="number">1</span>][<span class="string">&#x27;text&#x27;</span>] )</span><br><span class="line">df = pd.DataFrame(shortened, columns = [<span class="string">&#x27;text&#x27;</span>])</span><br><span class="line">df[<span class="string">&#x27;n_tokens&#x27;</span>] = df.text.apply(<span class="keyword">lambda</span> x: <span class="built_in">len</span>(tokenizer.encode(x)))</span><br><span class="line">df.n_tokens.hist()</span><br></pre></td></tr></table></figure><br><br><br><br><br><br><img src="/2023/05/12/algorithm/chatGPT-with-confluence/output_8_1-3877587.png" alt="png"><br>​<br><br><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##由于官方的限制，1分钟最多发起60个请求，所以为了防止报错此处主动休眠</span></span><br><span class="line"><span class="comment">##由于数据量过大，如果无法运行，可以在上面一栏    截取部分数据df = df[0:x]  x为截取长度</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cal</span>(<span class="params">x,waittime = <span class="number">0.6</span></span>):</span><br><span class="line">    res = openai.Embedding.create(<span class="built_in">input</span>=x, engine=<span class="string">&#x27;text-embedding-ada-002&#x27;</span>)[<span class="string">&#x27;data&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;embedding&#x27;</span>]</span><br><span class="line">    time.sleep(waittime)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">df[<span class="string">&#x27;embeddings&#x27;</span>] = df.text.apply(<span class="keyword">lambda</span> x: cal(x))</span><br><span class="line"></span><br><span class="line">df.to_csv(<span class="string">&#x27;processed/embeddings.csv&#x27;</span>)</span><br><span class="line">df.head()</span><br></pre></td></tr></table></figure><br><br><br><br><br><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>text</th><br>      <th>n_tokens</th><br>      <th>embeddings</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>2022-12-15【VWASP】【IDP】Scan qrcode login HU to …</td><br>      <td>472</td><br>      <td>[-0.0035752991680055857, 0.015155627392232418,…</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>| 11 incomplete | /  6 | 用例设计是否包含充分的正面、负面异常测试…</td><br>      <td>343</td><br>      <td>[0.012331507168710232, 0.002946529071778059, -…</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>2022-12-19   【VWASP】【StartupBroadcasting】Conte…</td><br>      <td>454</td><br>      <td>[0.004054947756230831, -0.0028905682265758514,…</td><br>    </tr><br>    <tr><br>      <th>3</th><br>      <td>| 203 complete OK |  |   <strong>专属部分</strong> |  | 检查人：Zh…</td><br>      <td>492</td><br>      <td>[0.019448528066277504, 0.00747803645208478, 0….</td><br>    </tr><br>    <tr><br>      <th>4</th><br>      <td>bak. B1. 1 Payment Center Integration Test Rep…</td><br>      <td>481</td><br>      <td>[0.0010055731981992722, -0.013514618389308453,…</td><br>    </tr><br>  </tbody><br></table><p></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##读取token数据</span></span><br><span class="line">df=pd.read_csv(<span class="string">&#x27;processed/embeddings.csv&#x27;</span>, index_col=<span class="number">0</span>)</span><br><span class="line">df[<span class="string">&#x27;embeddings&#x27;</span>] = df[<span class="string">&#x27;embeddings&#x27;</span>].apply(<span class="built_in">eval</span>).apply(np.array)</span><br><span class="line">df.head()</span><br></pre></td></tr></table></figure><p></p><p><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>text</th><br>      <th>n_tokens</th><br>      <th>embeddings</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>2022-12-15【VWASP】【IDP】Scan qrcode login HU to …</td><br>      <td>472</td><br>      <td>[-0.0035752991680055857, 0.015155627392232418,…</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>| 11 incomplete | /  6 | 用例设计是否包含充分的正面、负面异常测试…</td><br>      <td>343</td><br>      <td>[0.012331507168710232, 0.002946529071778059, -…</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>2022-12-19   【VWASP】【StartupBroadcasting】Conte…</td><br>      <td>454</td><br>      <td>[0.004054947756230831, -0.0028905682265758514,…</td><br>    </tr><br>    <tr><br>      <th>3</th><br>      <td>| 203 complete OK |  |   <strong>专属部分</strong> |  | 检查人：Zh…</td><br>      <td>492</td><br>      <td>[0.019448528066277504, 0.00747803645208478, 0….</td><br>    </tr><br>    <tr><br>      <th>4</th><br>      <td>bak. B1. 1 Payment Center Integration Test Rep…</td><br>      <td>481</td><br>      <td>[0.0010055731981992722, -0.013514618389308453,…</td><br>    </tr><br>  </tbody><br></table><br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##输入最大token，返回长度进行提问</span></span><br><span class="line">answer_question(df, question=<span class="string">&quot;测试用例需要满足那些要求?&quot;</span>, debug=<span class="literal">False</span>,use_GPT=<span class="literal">True</span>,max_len=<span class="number">1800</span>,max_tokens = <span class="number">1800</span>)</span><br></pre></td></tr></table></figure><pre><code>&apos;测试用例需要满足许多要求，包括但不限于：前提条件、输入数据和期待结果清晰、明确；包含充分的正面、负面异常测试用例；是否从用户层面来设计用户使用场景和使用流程的测试用例；是否简洁，复用性强等。具体要求见上文中的各项检查项。&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">answer_question(df, question=<span class="string">&quot;一份DD文档或是AD文档需要满足那些要求?,请用中文回答&quot;</span>, debug=<span class="literal">False</span>,use_GPT=<span class="literal">True</span>,max_len=<span class="number">1800</span>,max_tokens = <span class="number">1800</span>)</span><br></pre></td></tr></table></figure><pre><code>&apos;DD文档或AD文档需要满足以下要求：\n1. 它应该清晰明了，包括应用的功能、性能、界面、安全等方面。\n2. 它应该易于理解，包括适当的说明、流程图、状态图等。\n3. 它应该满足可复用性、易维护性等软件工程的基本原则。\n4. 它应该包括可靠性需求，描述系统的可用性、健壮性等需求。\n5. 它应该考虑约束和假设，包括客户和MA的约束和假设。\n6. 它应该包括详细设计，以阐明更改的原因和过程，并进行一致性评估。\n7. 它应该考虑软件单元的互操作性、交互、关键性、技术复杂性、风险和可测试性等方面。 \n8. 它应该包括接口定义，以使接口清楚明了。\n9. 历史记录应该得到正确维护。&apos;</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Target&quot;&gt;&lt;a href=&quot;#Target&quot; class=&quot;headerlink&quot; title=&quot;Target:&quot;&gt;&lt;/a&gt;Target:&lt;/h3&gt;&lt;p&gt;由于工作时Confluence中的文件太多，也比较杂乱，难以阅读，所以希望基于chatGPT能够帮助我快速从文件中获取我想要的知识&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://pjpjsocute.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="python" scheme="http://pjpjsocute.github.io/tags/python/"/>
    
      <category term="chatGpt" scheme="http://pjpjsocute.github.io/tags/chatGpt/"/>
    
      <category term="算法" scheme="http://pjpjsocute.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-386</title>
    <link href="http://pjpjsocute.github.io/2023/05/12/LeetCode/LeetCode-386/"/>
    <id>http://pjpjsocute.github.io/2023/05/12/LeetCode/LeetCode-386/</id>
    <published>2023-05-12T07:31:09.000Z</published>
    <updated>2023-05-12T14:36:08.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Q："><a href="#Q：" class="headerlink" title="Q："></a>Q：</h3><p>给你一个整数 <code>n</code> ，按字典序返回范围 <code>[1, n]</code> 内所有整数。</p><p>你必须设计一个时间复杂度为 <code>O(n)</code> 且使用 <code>O(1)</code> 额外空间的算法。</p><span id="more"></span><h3 id="S："><a href="#S：" class="headerlink" title="S："></a>S：</h3><p>首先：字典序可以抽象为一棵树，如下图所示</p><p><img src="/2023/05/12/LeetCode/LeetCode-386/1603875858-aRThUF-QQ20201028-170405@2x.png" alt="1603875858-aRThUF-QQ20201028-170405@2x"></p><p>所以，有小到大输出其实就是输出他的先序遍历</p><p><strong>参考二叉搜索树的先序遍历写法</strong></p><p>​    1.递归：</p><p>​        此处不一样的是需要舍去头结点0，以1-9分别为根节点进行遍历输出：</p><p>​            1.递归结束条件，当前结点＞n，则递归结束</p><p>​            2.将元素值添加进入res,遍历其10个兄弟结点，进入递归其子节点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">```java</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">lexicalOrder</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">             dfs(n, i, list);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> i,List&lt;Integer&gt;list)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i&gt;n)&#123;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        list.add(i);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">9</span>;j++)&#123;</span><br><span class="line">            dfs(n,i*<span class="number">10</span>+j,list);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">```</span><br></pre></td></tr></table></figure><p>​    2.迭代:</p><p>​    <strong>tipp </strong>：<code>while(curr%10==0) curr/=10;</code> 这行代码的目的是处理那些在字典序中应该提前结束的数字。</p><p>例如，假设 <code>n</code> 是 130。我们在字典序中遍历时，应该是这样的顺序：1, 10, 11, …, 19, 2, 20, …, 29, …, 13, 130, 14, …, 19, 2, …, 9。</p><p>当我们的 <code>curr</code> 变成 130 后，如果我们直接 <code>curr+=1</code>，那么 <code>curr</code> 就变成了 131，这显然是超过 <code>n</code> 的，而且不符合字典序。我们应该跳过所有 13x（x &gt; 0）的数字，直接变成 14。</p><p>这就是 <code>while(curr%10==0) curr/=10;</code> 这行代码的目的：当 <code>curr</code> 的最后一位是 0（即 <code>curr%10==0</code>）时，我们应该退回到上一层（即 <code>curr/=10</code>）。在这个例子中，130 退回到 13，然后 <code>curr+=1</code> 变成 14，这样就符合字典序了。</p><p>这样的处理能保证我们的遍历顺序始终是按照字典序进行的，即先遍历同一层的数，然后再遍历下一层的数。</p><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">     <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">lexicalOrder</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">         List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">         <span class="type">int</span> <span class="variable">curr</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">         <span class="comment">// 遍历/traverse</span></span><br><span class="line">         <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">             list.add(curr);</span><br><span class="line">             <span class="keyword">if</span>(curr*<span class="number">10</span>&lt;=n)&#123;</span><br><span class="line">                 curr*=<span class="number">10</span>;<span class="comment">//遍历下一层/find next level number</span></span><br><span class="line">             &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                 <span class="keyword">if</span>(curr&gt;=n)   curr/=<span class="number">10</span>;<span class="comment">//如果比n大，结束遍历退回上一层/If greater than n, end traversal and return to previous level</span></span><br><span class="line">                 curr+=<span class="number">1</span>;</span><br><span class="line">                 <span class="keyword">while</span>(curr%<span class="number">10</span>==<span class="number">0</span>) curr/=<span class="number">10</span>;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> list;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Q：&quot;&gt;&lt;a href=&quot;#Q：&quot; class=&quot;headerlink&quot; title=&quot;Q：&quot;&gt;&lt;/a&gt;Q：&lt;/h3&gt;&lt;p&gt;给你一个整数 &lt;code&gt;n&lt;/code&gt; ，按字典序返回范围 &lt;code&gt;[1, n]&lt;/code&gt; 内所有整数。&lt;/p&gt;
&lt;p&gt;你必须设计一个时间复杂度为 &lt;code&gt;O(n)&lt;/code&gt; 且使用 &lt;code&gt;O(1)&lt;/code&gt; 额外空间的算法。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://pjpjsocute.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="java" scheme="http://pjpjsocute.github.io/tags/java/"/>
    
      <category term="力扣之旅" scheme="http://pjpjsocute.github.io/tags/%E5%8A%9B%E6%89%A3%E4%B9%8B%E6%97%85/"/>
    
      <category term="DFS" scheme="http://pjpjsocute.github.io/tags/DFS/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-934</title>
    <link href="http://pjpjsocute.github.io/2023/05/12/LeetCode/LeetCode-934/"/>
    <id>http://pjpjsocute.github.io/2023/05/12/LeetCode/LeetCode-934/</id>
    <published>2023-05-12T07:22:55.000Z</published>
    <updated>2023-05-12T14:36:15.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="LeetCode-934"><a href="#LeetCode-934" class="headerlink" title="LeetCode-934"></a>LeetCode-934</h2><h3 id="Question"><a href="#Question" class="headerlink" title="Question:"></a>Question:</h3><p>给你一个大小为 <code>n x n</code> 的二元矩阵 <code>grid</code> ，其中 <code>1</code> 表示陆地，<code>0</code> 表示水域。</p><p><strong>岛</strong> 是由四面相连的 <code>1</code> 形成的一个最大组，即不会与非组内的任何其他 <code>1</code> 相连。<code>grid</code> 中 <strong>恰好存在两座岛</strong> 。</p><p>你可以将任意数量的 <code>0</code> 变为 <code>1</code> ，以使两座岛连接起来，变成 <strong>一座岛</strong> 。</p><p>返回必须翻转的 <code>0</code> 的最小数目。</p><span id="more"></span><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution:"></a>Solution:</h3><p>因为题干中只有2个岛，所以我们可以使用深搜，先找到其中一个岛。</p><p>对这个岛使用广度优先搜索，可以理解为对这个岛每次向外拓展1，当拓展第N次找到另外一个岛时，则为题干所求解。</p><h3 id="Code："><a href="#Code：" class="headerlink" title="Code："></a>Code：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">shortestBridge</span><span class="params">(<span class="type">int</span>[][] A)</span> &#123;</span><br><span class="line">        <span class="type">int</span> [][] direction = <span class="keyword">new</span> <span class="title class_">int</span> [][]&#123;&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;-<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,-<span class="number">1</span>&#125;&#125;;</span><br><span class="line">        Deque&lt;<span class="type">int</span> []&gt; queue = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="type">boolean</span> [][] visited = <span class="keyword">new</span> <span class="title class_">boolean</span>[A.length][A[<span class="number">0</span>].length];</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;A.length&amp;&amp;flag;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;A[<span class="number">0</span>].length;j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (A[i][j] == <span class="number">1</span>) &#123;</span><br><span class="line">                    dfs(  A, i, j, queue, visited);</span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty())&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> queue.size();</span><br><span class="line">            ans++;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;size;i++)&#123;</span><br><span class="line">                <span class="type">int</span> []node = queue.poll();</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++)&#123;</span><br><span class="line">                    <span class="type">int</span>  <span class="variable">nx</span> <span class="operator">=</span> node[<span class="number">0</span>]+direction[j][<span class="number">0</span>];</span><br><span class="line">                    <span class="type">int</span> <span class="variable">ny</span> <span class="operator">=</span> node[<span class="number">1</span>]+direction[j][<span class="number">1</span>];</span><br><span class="line">                    <span class="keyword">if</span>(nx&lt;<span class="number">0</span>||nx&gt;=A.length||ny&lt;<span class="number">0</span>||ny&gt;=A[<span class="number">0</span>].length||visited[nx][ny])    <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">if</span>(A[nx][ny]==<span class="number">1</span>)    <span class="keyword">return</span> ans;</span><br><span class="line">                    visited[nx][ny] = <span class="literal">true</span>;</span><br><span class="line">                    queue.add(<span class="keyword">new</span> <span class="title class_">int</span> []&#123;nx,ny&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> [][]A,<span class="type">int</span> i,<span class="type">int</span> j,Deque queue,<span class="type">boolean</span>[][]visited)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;<span class="number">0</span>||i&gt;=A.length||j&lt;<span class="number">0</span>||j&gt;=A[<span class="number">0</span>].length||visited[i][j]||A[i][j]!=<span class="number">1</span>)    <span class="keyword">return</span>;</span><br><span class="line">        visited[i][j] = <span class="literal">true</span>;</span><br><span class="line">        queue.add(<span class="keyword">new</span> <span class="title class_">int</span> []&#123;i,j&#125;);</span><br><span class="line">        dfs( A, i-<span class="number">1</span>, j, queue, visited);</span><br><span class="line">        dfs( A, i+<span class="number">1</span>, j, queue, visited);</span><br><span class="line">        dfs( A, i, j-<span class="number">1</span>, queue, visited);</span><br><span class="line">        dfs( A, i, j+<span class="number">1</span>, queue, visited);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;LeetCode-934&quot;&gt;&lt;a href=&quot;#LeetCode-934&quot; class=&quot;headerlink&quot; title=&quot;LeetCode-934&quot;&gt;&lt;/a&gt;LeetCode-934&lt;/h2&gt;&lt;h3 id=&quot;Question&quot;&gt;&lt;a href=&quot;#Question&quot; class=&quot;headerlink&quot; title=&quot;Question:&quot;&gt;&lt;/a&gt;Question:&lt;/h3&gt;&lt;p&gt;给你一个大小为 &lt;code&gt;n x n&lt;/code&gt; 的二元矩阵 &lt;code&gt;grid&lt;/code&gt; ，其中 &lt;code&gt;1&lt;/code&gt; 表示陆地，&lt;code&gt;0&lt;/code&gt; 表示水域。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;岛&lt;/strong&gt; 是由四面相连的 &lt;code&gt;1&lt;/code&gt; 形成的一个最大组，即不会与非组内的任何其他 &lt;code&gt;1&lt;/code&gt; 相连。&lt;code&gt;grid&lt;/code&gt; 中 &lt;strong&gt;恰好存在两座岛&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;你可以将任意数量的 &lt;code&gt;0&lt;/code&gt; 变为 &lt;code&gt;1&lt;/code&gt; ，以使两座岛连接起来，变成 &lt;strong&gt;一座岛&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;返回必须翻转的 &lt;code&gt;0&lt;/code&gt; 的最小数目。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://pjpjsocute.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="java" scheme="http://pjpjsocute.github.io/tags/java/"/>
    
      <category term="力扣之旅" scheme="http://pjpjsocute.github.io/tags/%E5%8A%9B%E6%89%A3%E4%B9%8B%E6%97%85/"/>
    
      <category term="DFS" scheme="http://pjpjsocute.github.io/tags/DFS/"/>
    
  </entry>
  
  <entry>
    <title>springboot+cucumber实践</title>
    <link href="http://pjpjsocute.github.io/2023/05/12/bdd/"/>
    <id>http://pjpjsocute.github.io/2023/05/12/bdd/</id>
    <published>2023-05-12T07:09:40.000Z</published>
    <updated>2023-05-12T07:18:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="springboot-cucumber实践"><a href="#springboot-cucumber实践" class="headerlink" title="springboot+cucumber实践"></a>springboot+cucumber实践</h1><h2 id="why-BDD"><a href="#why-BDD" class="headerlink" title="why BDD"></a>why BDD</h2><ul><li><strong>满足业务目标。</strong></li><li><strong>关注用户需求</strong></li><li><strong>良好的可读性</strong></li></ul><p>其实对于我自己来说，也有其他原因：</p><p>1.因为客观原因，有时候项目开发结束后才拿到PRD，所以在开发前期，通过一些方式确定明确的业务流程会比直接上手开发可以更容易的发现问题。相比较DD文档，BDD的feature可能是对于非开发人员更易懂的方案。</p><p>2.因为文档往往存在滞后，帮助将来的自己或是其他接手的同学去更快的回顾或是了解某个业务的诉求。</p><span id="more"></span><h2 id="一个样例项目的开始"><a href="#一个样例项目的开始" class="headerlink" title="一个样例项目的开始"></a>一个样例项目的开始</h2><h4 id="项目分层："><a href="#项目分层：" class="headerlink" title="项目分层："></a>项目分层：</h4><p><img src="/2023/05/12/bdd/WX20230512-151458@2x.png" alt="WX20230512-151458@2x"></p><h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h4><p>以<strong>功能配置</strong>单上线操作为例</p><p>application中存在一个上线接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">interface</span> ConfigurationCmdService&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上线功能</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cmd</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Result&lt;Boolean&gt;  <span class="title function_">online</span><span class="params">(ConfigOnlineCmd cmd)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 接口需要实现上线功能</span></span><br><span class="line"><span class="comment">* 假设操作只需要3步：</span></span><br><span class="line"><span class="comment">*1.查到需要上线的配置</span></span><br><span class="line"><span class="comment">*   2.上线操作</span></span><br><span class="line"><span class="comment">*   3.更新db</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">class</span> ConfigurationCmdServiceImpl <span class="keyword">implements</span> <span class="title class_">ConfigurationCmdService</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ConfigRepository    repository;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ConfigFactory factory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ConfigurationCmdServiceImpl</span><span class="params">(ConfigRepository repository,ConfigFactory factory)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.repository = repository;</span><br><span class="line">        <span class="built_in">this</span>.factory = factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ManualQueryServiceImpl</span><span class="params">(SnapshotRepository repository, ManualSnapshotFactory factory)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.repository = repository;</span><br><span class="line">        <span class="built_in">this</span>.factory = factory;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@AutoWired</span></span><br><span class="line">    Result&lt;Boolean&gt;  <span class="title function_">online</span><span class="params">(ConfigOnlineCmd cmd)</span>&#123;</span><br><span class="line">        <span class="type">Config</span> <span class="variable">config</span> <span class="operator">=</span> repository.queryById(cmd.getId());</span><br><span class="line">        config.online();</span><br><span class="line">        <span class="comment">//可能还有其他的一些操作</span></span><br><span class="line">        <span class="keyword">return</span> repository.update(config);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="BDD的接入"><a href="#BDD的接入" class="headerlink" title="BDD的接入"></a>BDD的接入</h2><h3 id="前置工作"><a href="#前置工作" class="headerlink" title="前置工作"></a>前置工作</h3><h4 id="cucumber依赖"><a href="#cucumber依赖" class="headerlink" title="cucumber依赖"></a>cucumber依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- bdd依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.cucumber<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cucumber-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.cucumber<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cucumber-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.cucumber<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cucumber-junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.cucumber<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cucumber-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="结合junit4"><a href="#结合junit4" class="headerlink" title="结合junit4"></a>结合junit4</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;maven-surefire-plugin.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                        com.example.**Test.java</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">testFailureIgnore</span>&gt;</span>false<span class="tag">&lt;/<span class="name">testFailureIgnore</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">skipTests</span>&gt;</span>false<span class="tag">&lt;/<span class="name">skipTests</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.surefire<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>surefire-junit4<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.22.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="结合jacoco生成单测报告"><a href="#结合jacoco生成单测报告" class="headerlink" title="结合jacoco生成单测报告"></a>结合jacoco生成单测报告</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jacoco<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jacoco-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jacoco.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>prepare-agent<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>report<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">phase</span>&gt;</span>prepare-package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>report<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- -排掉工具类包 比方说，需要排出工具包--&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>com.example.util.*<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p>启动类</p><p>glue实际上是告诉cucumber启动后去扫描对应包下含有@CucumberContextConfiguration的文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(Cucumber.class)</span></span><br><span class="line"><span class="meta">@CucumberOptions(</span></span><br><span class="line"><span class="meta">        features = &#123;&quot;classpath:feature&quot;&#125;,</span></span><br><span class="line"><span class="meta">        glue = &#123;&quot;com.example.step&quot;&#125;,</span></span><br><span class="line"><span class="meta">        plugin = &#123;&quot;pretty&quot;,&quot;html:target/html-reports.htm&quot;&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApplicationTest</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置在测试中需要启动的bean以及一些需要去mock的bean、</p><p>init方法在运行之前触发，reset方法见第四步</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CucumberContextConfiguration</span></span><br><span class="line"><span class="meta">@SpringBootTest(classes = &#123;</span></span><br><span class="line"><span class="meta">        SpringTestConfig.class,</span></span><br><span class="line"><span class="meta">        MockObjectConfiguration.class</span></span><br><span class="line"><span class="meta">    &#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Resetable&gt; resetables;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        CollectionUtils.emptyIfNull(resetables)</span><br><span class="line">                .stream().forEach(v-&gt;v.reset());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><p>在classpath:feature下新建一个feature文件</p><p>#language:zh-CN代表语言为中文</p><figure class="highlight feature"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#language:zh-CN</span></span><br><span class="line">功能:配置的CMD操作</span><br><span class="line">  场景:上线一条配置</span><br><span class="line">    假设存在以下配置</span><br><span class="line">        |<span class="string">id  </span>|<span class="string"> content</span>|<span class="string"> status </span>|<span class="string"> bizCode </span>|</span><br><span class="line">        |<span class="string">1 </span>|<span class="string">xxxxx   </span>|<span class="string"> AUDIT  </span>|<span class="string"> XXXX    </span>|</span><br><span class="line">        |<span class="string">2 </span>|<span class="string">xxxxx   </span>|<span class="string"> DRAFT  </span>|<span class="string"> XXXX    </span>|</span><br><span class="line">    当id为<span class="string">&quot;1&quot;</span>上线</span><br><span class="line">        |<span class="string"> languageType </span>|<span class="string"> bizCode </span>|</span><br><span class="line">        |<span class="string"> zh_CN        </span>|<span class="string"> 008     </span>|</span><br><span class="line">    那么id为<span class="string">&quot;1&quot;</span>的配置状态为<span class="string">&quot;上线中&quot;</span></span><br></pre></td></tr></table></figure><h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h3><p>实现上述的功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ContentStep</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> FakeConfigRepositoryImpl       configRepository;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String                            result;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ConfigurationCmdService cmdService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_CODE</span> <span class="operator">=</span> <span class="string">&quot;xxx&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">AssertService</span> <span class="variable">contentAssertService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AssertService</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String,String&gt; codeMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String,String&gt;()&#123;</span><br><span class="line">        &#123;</span><br><span class="line">            put(<span class="string">&quot;上线&quot;</span>,<span class="string">&quot;ONLINE&quot;</span>);</span><br><span class="line">            put(<span class="string">&quot;审核&quot;</span>,<span class="string">&quot;AUDIT&quot;</span>);</span><br><span class="line">            put(<span class="string">&quot;草稿&quot;</span>,<span class="string">&quot;DRAFT&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    @假如(<span class="string">&quot;假设存在以下配置&quot;</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 存在以下内容(DataTable dataTable) &#123;</span><br><span class="line">        <span class="comment">//根据dataTable去创建一条内容</span></span><br><span class="line">        List&lt;Config&gt; configs = ConfigTransform.transToConfig(dataTable.entries());</span><br><span class="line">        contentRepository.createAll(configs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @那么(<span class="string">&quot;id为&#123;string&#125;的配置状态为&#123;string&#125;&quot;</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> id为的配置状态为(String id,String status)&#123;</span><br><span class="line">        <span class="type">Config</span> <span class="variable">config</span> <span class="operator">=</span> configRepository.queryById(id);</span><br><span class="line">        <span class="comment">//判断结果</span></span><br><span class="line">        Assert.assertEquals(config.getStatus(),codeMap.get(status));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @当(<span class="string">&quot;id为&#123;string&#125;上线&quot;</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 在id为的目录下插入一条内容(String id)&#123;</span><br><span class="line">        <span class="comment">//创建命令</span></span><br><span class="line">        <span class="type">ContentCreateParam</span> <span class="variable">param</span> <span class="operator">=</span> createOnlineCmd(id);</span><br><span class="line">        <span class="comment">//获得结果</span></span><br><span class="line">        result = cmdService.online(param).getData().toString();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h3><p>mock db、外部服务。以mock db为例</p><p>DB使用一个map来模拟数据库操作</p><p>reset操作用于清空map，每一条用例都会自动清空map。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FakeConfigRepositoryImpl</span> <span class="keyword">implements</span> <span class="title class_">SearchDataRepository</span> ,Resetable&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, SearchDataDO&gt; doMap;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ConfigConverter converter;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FakeSearchDataRepositoryImpl</span><span class="params">(SearchDataConverter converter)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.doMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="built_in">this</span>.converter = converter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> config</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">create</span><span class="params">(Config config)</span> &#123;</span><br><span class="line">        <span class="type">ConfigDO</span> <span class="variable">configDo</span> <span class="operator">=</span> converter.convert2DO(config);</span><br><span class="line">        doMap.put(String.valueOf(config.getId()),configDo);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> searchData</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">update</span><span class="params">(Config config)</span> &#123;</span><br><span class="line">        create(searchData);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reset</span><span class="params">()</span> &#123;</span><br><span class="line">        doMap.clear();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>spring-test和spring-context版本必须一致，否则会报错</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;springboot-cucumber实践&quot;&gt;&lt;a href=&quot;#springboot-cucumber实践&quot; class=&quot;headerlink&quot; title=&quot;springboot+cucumber实践&quot;&gt;&lt;/a&gt;springboot+cucumber实践&lt;/h1&gt;&lt;h2 id=&quot;why-BDD&quot;&gt;&lt;a href=&quot;#why-BDD&quot; class=&quot;headerlink&quot; title=&quot;why BDD&quot;&gt;&lt;/a&gt;why BDD&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;满足业务目标。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关注用户需求&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;良好的可读性&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其实对于我自己来说，也有其他原因：&lt;/p&gt;
&lt;p&gt;1.因为客观原因，有时候项目开发结束后才拿到PRD，所以在开发前期，通过一些方式确定明确的业务流程会比直接上手开发可以更容易的发现问题。相比较DD文档，BDD的feature可能是对于非开发人员更易懂的方案。&lt;/p&gt;
&lt;p&gt;2.因为文档往往存在滞后，帮助将来的自己或是其他接手的同学去更快的回顾或是了解某个业务的诉求。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://pjpjsocute.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="项目" scheme="http://pjpjsocute.github.io/tags/%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="java" scheme="http://pjpjsocute.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>数据结构——链表、栈、队列</title>
    <link href="http://pjpjsocute.github.io/2023/05/12/Datastructures/LinkedList/"/>
    <id>http://pjpjsocute.github.io/2023/05/12/Datastructures/LinkedList/</id>
    <published>2023-05-12T05:15:17.000Z</published>
    <updated>2023-05-12T14:11:34.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>​    链表、队列、栈，是数据结构中最基础的几个结构，而链表是最基础的。之后的复杂数据结构大都是在其基础上演化出来的。</p><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><p>​    一种线程数据结构，与数组不同的是，它在内存空间中不一定是顺序存储的，为了保证链表中元素的连续性，一般使用一个指针来找到下一个元素。</p><p><img src="/2023/05/12/Datastructures/LinkedList/WX20230512-133517@2x.png" alt="linkedlist"></p><span id="more"></span><p>使用java实现一个链表链表，首先需要定义一个节点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>&lt;T&gt; &#123;</span><br><span class="line">        T       value;</span><br><span class="line">        Node&lt;T&gt; next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(T value)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>因此，对于链表来说，如果想要根据索引查找元素，只能从头开始，时间复杂度O(N).</p><p>如果在Node中增加了前驱节点，那么就会成为双向链表。</p><p><img src="/2023/05/12/Datastructures/LinkedList/WX20230512-134440@2x.png" alt="doublelinkedlist"></p><p>Java中的LinkedList就是典型的双向链表。</p><p>如果在LinkedList上结合HashMap(Set)就是<strong>LinkedHashMap</strong>(Set),既保证了元素的有序性，有可以O1获取元素。</p><p>一个简单的链表实现如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> table;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="comment">//单向链表</span></span><br><span class="line"><span class="comment">//头结点不存元素</span></span><br><span class="line"><span class="comment">//需要一个记录首节点,内容为null；一个记录链表长度</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkList</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Iterable</span>&lt;T&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span> Node head;<span class="comment">//头结点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> N;<span class="comment">//链表长度</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;T&gt; &#123;</span><br><span class="line">        T item;                                     <span class="comment">//存储元素</span></span><br><span class="line">        Node next;                                      <span class="comment">//指向下一节点 一个Node对象</span></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(T item, Node next)</span>&#123;             <span class="comment">//有参构造</span></span><br><span class="line">            <span class="built_in">this</span>.item = item;</span><br><span class="line">            <span class="built_in">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LinkList</span><span class="params">()</span>&#123;<span class="comment">//无参初始化</span></span><br><span class="line">        <span class="built_in">this</span>.head = <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="literal">null</span>,<span class="literal">null</span>);</span><br><span class="line">        <span class="built_in">this</span>.N = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span>&#123;<span class="comment">//清空链表：头结点不指向下一个元素</span></span><br><span class="line">        N=<span class="number">0</span>;</span><br><span class="line">        head.next = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span>  <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>&#123;<span class="comment">//判断空</span></span><br><span class="line">        <span class="keyword">return</span> N==<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">length</span><span class="params">()</span>&#123;<span class="comment">//求长度</span></span><br><span class="line">        <span class="keyword">return</span> N;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">get</span><span class="params">(<span class="type">int</span> i)</span>&#123; <span class="comment">//获取第i个元素</span></span><br><span class="line">        <span class="comment">//利用循环，从头结点向后遍历，找i次</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">n</span> <span class="operator">=</span> head.next;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span><span class="number">0</span>;index &lt;i;index++)&#123;</span><br><span class="line">            n = n.next; <span class="comment">//循环指向下一个节点</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (T) n.item;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(T t)</span>&#123;                                        <span class="comment">//添加数据</span></span><br><span class="line">                                                                    <span class="comment">//添加元素只需要将最后一个节点指向新节点</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">n</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span>(n.next!=<span class="literal">null</span>)&#123;</span><br><span class="line">            n = n.next;                                             <span class="comment">//尾节点不为null不能换</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(t,<span class="literal">null</span>);</span><br><span class="line">        n.next =newNode;</span><br><span class="line">        N++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(<span class="type">int</span> i,T t)</span>&#123;                      <span class="comment">//i之前添加数据</span></span><br><span class="line">                                                        <span class="comment">//找到i前的一个节点</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">pre</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;index&lt;=i-<span class="number">1</span>;index++)&#123;                             <span class="comment">///因为头结点实际循环i-1次</span></span><br><span class="line">            pre = pre.next;</span><br><span class="line">        &#125;</span><br><span class="line">                                                 <span class="comment">//找到i节点</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">curr</span> <span class="operator">=</span> pre.next;</span><br><span class="line">        <span class="comment">//创建新节点并指向i</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(t,curr);</span><br><span class="line">        <span class="comment">//i之前的节点指向新节点</span></span><br><span class="line">        pre.next = newNode;</span><br><span class="line">        <span class="comment">//加1</span></span><br><span class="line">        N++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">remove</span> <span class="params">(<span class="type">int</span> i)</span>&#123;<span class="comment">//删除第i个元素并返回</span></span><br><span class="line">        <span class="comment">//获得i之前的节点</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">pre</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;index&lt;=i-<span class="number">1</span>;index++)&#123;</span><br><span class="line">            pre = pre.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//找到i</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">curr</span> <span class="operator">=</span> pre.next;</span><br><span class="line">        <span class="comment">//找到i后的节点</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">fur</span> <span class="operator">=</span> curr.next;</span><br><span class="line">        <span class="comment">//将2者连接后-1</span></span><br><span class="line">        pre.next = fur;</span><br><span class="line">        N--;</span><br><span class="line">        <span class="keyword">return</span> (T) curr.item;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">indexOf</span><span class="params">(T t)</span>&#123;<span class="comment">//返回首次出现元素的序列</span></span><br><span class="line">        <span class="comment">//头结点开始遍历，找到每个节点的元素，取出item与T比较</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">n</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span>;n.next!=<span class="literal">null</span>;i++)&#123;<span class="comment">//下一个元素不是null就一直找</span></span><br><span class="line">            n = n.next;</span><br><span class="line">            <span class="keyword">if</span> (n.item.equals(t))&#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;<span class="comment">//没有设置对不存在的这一元素的提醒</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reverse</span><span class="params">()</span>&#123;  <span class="comment">//翻转单链表  递归翻转</span></span><br><span class="line">        <span class="keyword">if</span> (isEmpty())&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            reverse(head.next);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">reverse</span><span class="params">(Node curr)</span>&#123;  <span class="comment">//翻转单链表cur,并返回</span></span><br><span class="line">        <span class="keyword">if</span>(curr.next==<span class="literal">null</span>)&#123;</span><br><span class="line">            head.next = curr;</span><br><span class="line">            <span class="keyword">return</span> curr;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//递归翻转当前节点的下一个节点</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">per</span> <span class="operator">=</span> reverse(curr.next); <span class="comment">//新节点为翻转后的下一节点</span></span><br><span class="line">        per.next = curr; <span class="comment">//新节点的下一个节点为反转前的前一个节点</span></span><br><span class="line">        curr.next = <span class="literal">null</span>; <span class="comment">//这个节点设为尾结点</span></span><br><span class="line">        <span class="keyword">return</span> curr;</span><br><span class="line">            <span class="comment">//不是最后一个节点那么则递归翻转最后一个节点的前一个节点</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Iterator <span class="title function_">iterator</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LIterator</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">LIterator</span> <span class="keyword">implements</span> <span class="title class_">Iterator</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> Node n;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">LIterator</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.n = head; <span class="comment">///初始化</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123; <span class="comment">//满足hasNext条件则不断执行next</span></span><br><span class="line">            <span class="keyword">return</span> n.next!=<span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Object <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">            n = n.next;</span><br><span class="line">            <span class="keyword">return</span> n.item;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="算法题中，链表经常出现，比较基础的题型包括：链表的翻转，环判断，环入口，多链表求第K大-小元素等。链表也是实现跳表的基础。"><a href="#算法题中，链表经常出现，比较基础的题型包括：链表的翻转，环判断，环入口，多链表求第K大-小元素等。链表也是实现跳表的基础。" class="headerlink" title="算法题中，链表经常出现，比较基础的题型包括：链表的翻转，环判断，环入口，多链表求第K大/小元素等。链表也是实现跳表的基础。"></a>算法题中，链表经常出现，比较基础的题型包括：链表的翻转，环判断，环入口，多链表求第K大/小元素等。链表也是实现跳表的基础。</h4><h3 id="队列-栈"><a href="#队列-栈" class="headerlink" title="队列/栈"></a>队列/栈</h3><p>​    链表和队列本质上是一种特殊的单链表，不同之处在于他们限制了元素的插入/删除顺序。</p><h4 id="队列："><a href="#队列：" class="headerlink" title="队列："></a>队列：</h4><p>​    对于队列来说，元素从一端进入，从另一端出去，也就是先入的元素先被删除，英文叫做：First In，First Out，简写FIFO。</p><p><img src="/2023/05/12/Datastructures/LinkedList/WX20230512-135224@2x.png" alt="queue"></p><p>​    队列比较经典的使用是在广度优先搜索当中(树的层序遍历其实也是广度优先搜索)。除此之外，队列也可以拥有顺序，称之为优先队列，在java已经有实现，称之为<strong>PriorityQueue</strong>。</p><h4 id="队列实现"><a href="#队列实现" class="headerlink" title="队列实现:"></a>队列实现:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> zhan;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="comment">//先进先出 栈相比，队列一端进一端出。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Queue</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Iterable</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;T&gt;&#123;</span><br><span class="line">        <span class="keyword">public</span> T item;</span><br><span class="line">        <span class="keyword">public</span> Node next;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(T item,Node next)</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.item = item;</span><br><span class="line">            <span class="built_in">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> Node head;  <span class="comment">//头节点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> N;</span><br><span class="line">    <span class="keyword">private</span> Node last;  <span class="comment">//尾</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Queue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.head = <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="literal">null</span>,<span class="literal">null</span>);</span><br><span class="line">        <span class="built_in">this</span>.last = <span class="literal">null</span>;</span><br><span class="line">        <span class="built_in">this</span>.N = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> N==<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> N;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">enqueue</span><span class="params">(T t)</span>&#123;           <span class="comment">//由last插入链表,从首节点依次插入</span></span><br><span class="line">        <span class="keyword">if</span> (last == <span class="literal">null</span>)&#123;</span><br><span class="line">            last= <span class="keyword">new</span> <span class="title class_">Node</span>(t,<span class="literal">null</span>);</span><br><span class="line">            head.next = last;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="type">Node</span> <span class="variable">oldlast</span> <span class="operator">=</span> last;</span><br><span class="line">            last = <span class="keyword">new</span> <span class="title class_">Node</span>(t,<span class="literal">null</span>);</span><br><span class="line">            oldlast.next = last;</span><br><span class="line">        &#125;</span><br><span class="line">        N++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">dequeue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;            <span class="comment">//头结点开始删除</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">oldeFirst</span> <span class="operator">=</span> head.next;</span><br><span class="line">        head.next = oldeFirst.next;</span><br><span class="line">        N--;</span><br><span class="line">        <span class="comment">//删队列在删除元素，所以需要重置last</span></span><br><span class="line">        <span class="keyword">if</span> (isEmpty())&#123;</span><br><span class="line">            last = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (T)oldeFirst.item;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Iterator&lt;T&gt; <span class="title function_">iterator</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">QIterator</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">QIterator</span> <span class="keyword">implements</span> <span class="title class_">Iterator</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Node n;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">QIterator</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.n = head;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> n.next!=<span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Object <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">            n = n.next;</span><br><span class="line">            <span class="keyword">return</span> (T)n.item;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="栈："><a href="#栈：" class="headerlink" title="栈："></a>栈：</h4><p>​    栈则相反，元素从一端进，就要从一端出。也就是先进后出，英文叫做：First In，Last Out，简称FILO。</p><p><img src="/2023/05/12/Datastructures/LinkedList/WX20230512-135651@2x.png" alt="stack"></p><p>​    栈在算法中经常使用到，诸如括号标点匹配问题，单调栈问题等，递归也是一种特殊的对栈的使用。</p><h4 id="stack实现："><a href="#stack实现：" class="headerlink" title="stack实现："></a>stack实现：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> zhan;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="comment">//链表栈</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Stack</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Iterable</span>&lt;T&gt;&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;T&gt;&#123;      <span class="comment">//链表类</span></span><br><span class="line">        <span class="keyword">public</span> T item;</span><br><span class="line">        <span class="keyword">public</span> Node next;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(T item,Node next)</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.item =item;</span><br><span class="line">            <span class="built_in">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> N;          <span class="comment">//栈元素个数</span></span><br><span class="line">    <span class="keyword">private</span> Node head;      <span class="comment">//记录头元素</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Stack</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.N = N;</span><br><span class="line">        <span class="built_in">this</span>.head = <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="literal">null</span>,<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> N==<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> N;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//写压栈</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(T t)</span>&#123;</span><br><span class="line">        <span class="comment">//找到首节点指向的第一个节点</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">oldNode</span> <span class="operator">=</span> head.next;</span><br><span class="line">        <span class="comment">//创建新节点</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(t,<span class="literal">null</span>);</span><br><span class="line">        <span class="comment">//首节点指向新节点</span></span><br><span class="line">        head.next = newNode;</span><br><span class="line">        <span class="comment">//新节点指向原来的第一节点</span></span><br><span class="line">        newNode.next = oldNode;</span><br><span class="line">        N++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">pop</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//首节点指向第一个节点</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">oldFirst</span> <span class="operator">=</span> head.next;</span><br><span class="line">        <span class="comment">//head.next = oldFirst.next不安全，需要校验</span></span><br><span class="line">        <span class="keyword">if</span> (oldFirst==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        head.next = oldFirst.next;</span><br><span class="line">        N--;</span><br><span class="line">        <span class="keyword">return</span> (T)oldFirst.item;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Iterator&lt;T&gt; <span class="title function_">iterator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LIterator</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">LIterator</span> <span class="keyword">implements</span> <span class="title class_">Iterator</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Node n;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">LIterator</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.n = head;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> n.next!=<span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Object <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">            n = n.next;</span><br><span class="line">            <span class="keyword">return</span> n.item;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;​    链表、队列、栈，是数据结构中最基础的几个结构，而链表是最基础的。之后的复杂数据结构大都是在其基础上演化出来的。&lt;/p&gt;
&lt;h3 id=&quot;链表&quot;&gt;&lt;a href=&quot;#链表&quot; class=&quot;headerlink&quot; title=&quot;链表&quot;&gt;&lt;/a&gt;链表&lt;/h3&gt;&lt;p&gt;​    一种线程数据结构，与数组不同的是，它在内存空间中不一定是顺序存储的，为了保证链表中元素的连续性，一般使用一个指针来找到下一个元素。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2023/05/12/Datastructures/LinkedList/WX20230512-133517@2x.png&quot; alt=&quot;linkedlist&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://pjpjsocute.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="java" scheme="http://pjpjsocute.github.io/tags/java/"/>
    
      <category term="数据结构" scheme="http://pjpjsocute.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>写在开始</title>
    <link href="http://pjpjsocute.github.io/2023/05/12/start/"/>
    <id>http://pjpjsocute.github.io/2023/05/12/start/</id>
    <published>2023-05-12T04:14:16.000Z</published>
    <updated>2023-05-12T04:25:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>​        很早之前就有一个想要搭建个人博客的想法，但是由于学业，工作等原因一直没有付诸于实践。在入职新公司后，由于有了时间，加上一些个人原因，使得我决定开始搭建一个简单的个人blog。Blog中将会记录我的在技术上遇到的一些问题和尝试，以及记录自己的学习和成长过程。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​        很早之前就有一个想要搭建个人博客的想法，但是由于学业，工作等原因一直没有付诸于实践。在入职新公司后，由于有了时间，加上一些个人原因，使得我决定开始搭建一个简单的个人blog。Blog中将会记录我的在技术上遇到的一些问题和尝试，以及记录自己的学习和成长过程。
      
    
    </summary>
    
      <category term="life" scheme="http://pjpjsocute.github.io/categories/life/"/>
    
    
      <category term="Trying" scheme="http://pjpjsocute.github.io/tags/Trying/"/>
    
  </entry>
  
</feed>
